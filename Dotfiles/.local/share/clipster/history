{"PRIMARY": ["$reset_color", "%}@%{", "$fg", "%\\", "s=on -D", "\\", "[", "PS1=\"%{%F{red}%}%n%{%f%}@%{%F{blue}%}%m %{%F{yellow}%}%~ %{$%f%}%% \"", "#PS1=\"%{$fg[red]%}%n%{$reset_color%}@%{$fg[blue]%}%m %{$fg[yellow]%}%(5~|%-1~/.../%3~|%4~) %{$reset_color%}%% \"", "green", "%B%", "%", "red", "{%F{yellow}%}", "%F{green}%}", "{%F{blue}%}", "{%F{green}%}:", "{%F{red}[%}", "%f%", "$", "}", "blue", "#PS1=\"%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M$fg[green]%}:%{$fg[magenta]%}%~%{$fg[red]%}]%{$reset_color%}$ %b\"\n", "1", "cat \"/sys/devices/platform/it87.2608/hwmon/hwmon2/temp1_input\" | cut -c -2", "'NR>1'", "print only one line that starts with", "\n-1\n1\n\nWould like to run multiple \"awk\" commands in single script .. For example Master.csv.gz located at /cygdrive/e/Test/Master.csv.gz and Input files are located in different sub directories like /cygdrive/f/Jan/Input_Jan.csv.gz & /cygdrive/f/Feb/Input_Feb.csv.gz and so on .. All input files are *.gz extension files.\n\nBelow commands are working fine while executing command one by one:\n\nCommand#1\n\nawk ' BEGIN {FS = OFS = \",\"} FNR==NR {a[$2] = $0; next} ($2 in a) {print $0}'  <(gzip -dc /cygdrive/e/Test/Master.csv.gz) <(gzip -dc /cygdrive/f/Jan/Input_Jan.csv.gz) >>Output.txt\n\nOutput#1:\n\nName,Age,Location\nabc,20,xxx\n\nCommand#2\n\nawk ' BEGIN {FS = OFS = \",\"} FNR==NR {a[$2] = $0; next} ($2 in a) {print $0}'  ", "commands", "FNR==i", "one", "line", "only first ", " only first line", "print line that ", "~/.config/qtile/scripts/cpu_temp.sh", "/usr/share/xsessions/qtile.desktop", "yellow", "desktop", "sudo nvim /usr/share/xsessions/qtile.desktop\n", "~/.xinitrc", "def open_calendar(qtile):  # spawn calendar widget\n    qtile.cmd_spawn('gsimplecal next_month')", "calendar", "ulauncher", "gsimplecal next_month", "open_ulauncher", "lambda qtile: qtile.cmd_spawn('ulauncher')", "lambda qtile: ", "qtile.", "\ndef open_ulauncher(qtile):  # spawn calendar widget\n    lambda cmd_spawn('ulauncher')", "spawn", "cmd", "-o cmd -f restart  ", "Qtile Documentation, Release 0.17.1.dev3+g0245768.d20210217Live DocumentationThe shellhelpcommand provides the canonical documentation for the Qtile API:> cd layout/1layout[1]> helphelp command   -- Helpfora specific command.Builtins========cd    exit  help  ls    q     quitCommandsforthis object========================add           commands      current       delete        docdown          get_info      items         next          previousrotate        shuffle_down  shuffle_up    toggle_split  uplayout[1]> help previousprevious()Focus previous stack.1.4.3  qtile cmd-objThis is a simple tool to expose qtile.command functionality to shell.  This can be used standalone or in other shellscripts.Examples:Output ofqtile cmd-obj -husage: qtile cmd-obj [-h] [--object OBJ_SPEC [OBJ_SPEC ...]][--function FUNCTION] [--args ARGS [ARGS ...]] [--info]Simple tool to expose qtile.command functionality to shell.optional arguments:-h, --help            show this help message and exit--object OBJ_SPEC [OBJ_SPEC ...], -o OBJ_SPEC [OBJ_SPEC ...]Specify path to object (space separated). If no--function flag display available commands.--function FUNCTION, -f FUNCTIONSelect function to execute.--args ARGS [ARGS ...], -a ARGS [ARGS ...]Set arguments supplied to function.--info, -i            With both --object and --function args printsdocumentation for function.Examples:qtile cmd", "Qtile Documentation, Release 0.17.1.dev3+g0245768.d20210217Live DocumentationThe shellhelpcommand provides the canonical documentation for the Qtile API:> cd layout/1layout[1]> helphelp command   -- Helpfora specific command.Builtins========cd    exit  help  ls    q     quitCommandsforthis object========================add           commands      current       delete        docdown          get_info      items         next          previousrotate        shuffle_down  shuffle_up    toggle_split  uplayout[1]> help previousprevious()Focus previous stack.1.4.3  qtile cmd-objThis is a simple tool to expose qtile.command functionality to shell.  This can be used standalone or in other shellscripts.Examples:Output ofqtile cmd-obj -husage: qtile cmd-obj [-h] [--object OBJ_SPEC [OBJ_SPEC ...]][--function FUNCTION] [--args ARGS [ARGS ...]] [--info]Simple tool to expose qtile.command functionality to shell.optional arguments:-h, --help            show this help message and exit--object OBJ_SPEC [OBJ_SPEC ...], -o OBJ_SPEC [OBJ_SPEC ...]Specify path to object (space separated). If no--function flag display available commands.--function FUNCTION, -f FUNCTIONSelect function to execute.--args ARGS [ARGS ...], -a ARGS [ARGS ...]Set arguments supplied to function.--info, -i            With both --object and --function args printsdocumentation for function.Examples:qtile ", "qtile cmd-obj", "cairo-dock > /dev/null 2>&1 & exit", "Qtile Documentation, Release 0.17.1.dev3+g0245768.d20210217Live DocumentationThe shellhelpcommand provides the canonical documentation for the Qtile API:> cd layout/1layout[1]> helphelp command   -- Helpfora specific command.Builtins========cd    exit  help  ls    q     quitCommandsforthis object========================add           commands      current       delete        docdown          get_info      items         next          previousrotate        shuffle_down  shuffle_up    toggle_split  uplayout[1]> help previousprevious()Focus previous stack.1.4.3  qtile cmd-objThis is a simple tool to expose qtile.command functionality to shell.  This can be used standalone or in other shellscripts.Examples:Output ofqtile cmd-obj -husage: qtile cmd-obj [-h] [--object OBJ_SPEC [OBJ_SPEC ...]][--function FUNCTION] [--args ARGS [ARGS ...]] [--info]Simple tool to expose qtile.command functionality to shell.optional arguments:-h, --help            show this help message and exit--object OBJ_SPEC [OBJ_SPEC ...], -o OBJ_SPEC [OBJ_SPEC ...]Specify path to object (space separated). If no--function flag display available commands.--function FUNCTION, -f FUNCTIONSelect function to execute.--args ARGS [ARGS ...], -a ARGS [ARGS ...]Set arguments supplied to function.--info, -i            With both --object and --function args printsdocumentation for function.Examples:qtile cmd-objqtile cmd", "qtile cmd-obj -o cmd", " -f restart", " > /dev/null 2>&1", "cairo-dock &", "autostart = [\n        \"sh ~/.xinitrc\",\n]\n\nfor x in autostart:\n    os.system(x)", "$ qtile cmd-obj -o cmd -f restart", "qtile cmd-obj -o cmd -f restart", "text", "zenity --info --text \"RSS YouTube Restarted\" 2> /dev/null", "cairo-doc", " cairo-d", "cairo-dock ", "easystroke ", " easystroke &", "killall easystroke & ", "\n\n\n\n\n", "\n\n\n\n\n\n\n\n", " firewall-applet", "&&", "pgrep -x firewall-applet || firewall-applet &", "firewall-applet &", "pgrep -x ", " picom", " cairo-dock ", " easystroke ", "pgrep -x firewall-applet || ", "firewall", "applet", "pgrep -x firewall-applet && killall firewall-applet\n", "nm-applet", "pgrep -x  ||", "cairo-dock", "pgrep -x cairo-dock  || ", "easystroke", "firewall-applet", "pgrep -x  || ", "pgrep -x picom ||", "||", "killall ", "icom && killall picom", "picom", "#!/bin/sh\n\nuserresources=$HOME/.Xresources\nusermodmap=$HOME/.Xmodmap\nsysresources=/etc/X11/xinit/.Xresources\nsysmodmap=/etc/X11/xinit/.Xmodmap\n\n# merge in defaults and keymaps\n\nif [ -f $sysresources ]; then\n    xrdb -merge $sysresources\nfi\n\nif [ -f $sysmodmap ]; then\n    xmodmap $sysmodmap\nfi\n\nif [ -f \"$userresources\" ]; then\n  xrdb -merge \"$userresources\"\nfi\n\nif [ -f \"$usermodmap\" ]; then\n    xmodmap \"$usermodmap\"\nfi\n\n# start some nice programs\n\nif [ -d /etc/X11/xinit/xinitrc.d ] ; then\n for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do\n  [ -x \"$f\" ] && . \"$f\"\n done\n unset f\nfi\n\n# twm &\n# xclock -geometry 50x50-1+1 &\n# xterm -geometry 80x50+494+51 &\n# xterm -geometry 80x20+494-0 &\n# exec xterm -geometry 80x66+0+0 -name login\n\n# Autostart\nexport PATH=$PATH:$HOME/Scripts/Shell/Autostart/\n\n# nvidia_led.sh &\n\n# nvidia-settings --load-config-only &\npgrep -x firewall-applet && killall firewall-applet\npgrep -x nm-applet && killall nm-applet\npgrep -x cairo-dock && killall cairo-dock\npgrep -x easystroke && killall easystroke\n\n\n picom -cCGb &\n\nsetxkbmap -layout es &\n\nset_background.sh &\n\nfirewall-applet &\n\nnm-applet --sm-disable &\n\ncairo-dock &\n\neasystroke &\n\nimwheel.sh &\n\nexec qtile\n", " qtile:", "lambda qtile:", "set_background.sh", "polybar", "    killall polybar\n", "launch", "    $HOME/Scripts/Bash/Polybar/launch.sh\n", "# Compositor\nCOMP_Disabled=\"killall picom\"\nCOMP_Enabled=\"picom -cCGb\"", "ll gamemoded\n    exit", "# Launch\ncd \"$DIR\"\ngamemoderun WINEPREFIX=\"$WINEPREFIX\" \"$WINE\" \"$EXE\" $ARGS &\necho \"Launching $DIR/$EXE\"\n\n# Before Launch\nwhile ! pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    qdbus org.kde.KWin /Compositor suspend\n    sleep 5\n    killall lutris\n    killall cairo-dock\n\n# After Launch\nwhile pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    qdbus org.kde.KWin /Compositor resume\n    cairo-dock > /dev/null 2>&1 &\n    sleep 5\n    killall gamemoded &\n    exit", "# Launch\ncd \"$DIR\"\ngamemoderun WINEPREFIX=\"$WINEPREFIX\" \"$WINE\" \"$EXE\" $ARGS &\necho \"Launching $DIR/$EXE\"\n\n# Before Launch\nwhile ! pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    qdbus org.kde.KWin /Compositor suspend\n    sleep 5\n    killall lutris\n    killall cairo-dock\n\n# After Launch\nwhile pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    qdbus org.kde.KWin /Compositor resume\n    cairo-dock > /dev/null 2>&1 &\n    sleep 5\n    killall gamemoded &\n    exit\n\n# ======================================================================== #", "NVIDIA", "#!/bin/bash\n\n# ======================================================================== #\n\n# Current Directory\nDIR=$(dirname \"$(realpath \"$0\")\" | sed -s \"s|/Wine||g\")\n\n# Compositor\nCOMP_Disabled=\"killall picom\"\nCOMP_Enabled=\"picom -cCGb\"\n\n# Game Executable\nEXE=\"./bin/x64/Game.exe\"\nPROCESS=\"Game.exe\"\nARGS=\"-vulkan\"\n\n# Environment\nexport WINEDLLOVERRIDES=\"mscoree,mshtml=\"\nexport WINEFSYNC=1\nexport MANGOHUD=1\nexport ENABLE_VKBASALT=1\nexport __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1\nexport __GL_SHADER_DISK_CACHE=1\nexport __GL_SHADER_DISK_CACHE_PATH=\"$DIR\"\n\n# ======================================================================== #\n\n# Chech if the script is in Wine directory\nLAUNCH_GAME=\"$(find \"${DIR}/Wine\" -type f -iname \"Launch-*\")\"\n\nwhile true; do\n    if [ ! -f \"$LAUNCH_GAME\" ]; then clear & sleep 1\n        echo -e '\\nThis Script needs to be in a folder called \"Wine\", with the prename \"Launch-\" (example: Launch-My_Game.sh) inside the Game folder.'\n        [ ! -d \"${DIR}/Wine\" ] &&\n            echo -e \"\\nCreating one in the current directory...\" && sleep 2 &&\n            mkdir -p \"${DIR}/Wine\"\n        echo -e '\\nPlease, put this script in it and put \"Wine\" folder whatever you want in the Game folder.'\n        read -rsn1 -p \"$(echo -e \"\\nPress any key to close this script, make the changes and run it again...\")\"; echo &\n        exit\n\n    else\n        break\n    fi\ndone\n\n# Chech if wine-pfx exist\nwhile true; do\n    if [ ! -f \"${DIR}/Wine/wine-pfx/system.reg\" ]; then clear & sleep 1\n        echo -e \"\\nThere is not a valid wine-pfx folder.\\nThis is neccesary to run this script.\"\n        [ ! -d \"${DIR}/Wine/wine-pfx\" ] &&\n            echo -e \"\\nCreating wine-pfx folder...\" && sleep 2 &&\n            mkdir -p \"${DIR}/Wine/wine-pfx\"\n        echo -e '\\nPlease, copy a valid wine-prefix in \"wine-pfx\" folder or delete the created folder and create a symlink to a valid wineprefix and call the symlink \"wine-pfx\"'\n        read -rsn1 -p \"$(echo -e \"\\nPress any key to continue...\")\"\n\n    elif [ -f \"${DIR}/Wine/wine-pfx/system.reg\" ]; then\n        break\n    fi\ndone\n\n# Chech if wine-build exist\nwhile true; do\n    if [ ! -d \"${DIR}/Wine/wine-build\" ] && [ ! -f \"${DIR}/Wine/wine\" ]; then clear & sleep 1\n        echo -e '\\nThere is not a valid \"wine-build folder\" or symlink to a \"wine\" file\\nThis is neccesary to run this script'\n        [ ! -d \"${DIR}/Wine/wine-build\" ] &&\n            echo -e \"\\nCreating wine-build folder...\" && sleep 2 &&\n            mkdir -p \"${DIR}/Wine/wine-build\"\n        echo -e '\\nPlease, copy a valid wine-build in \"wine-build\" folder or delete the created folder and create a symlink to a valid \"wine-build\" folder and call the symlink \"wine-build.\\nOr create a symlink to a \"wine\" file\"'\n        read -rsn1 -p \"$(echo -e \"\\nPress any key to continue...\")\"\n\n    elif [ -d \"${DIR}/Wine/wine-build\" ]; then\n        WINE_BUILD=$(find -L \"${DIR}/Wine/wine-build\" -type f -iname \"wine\") 2> /dev/null\n        [ -f \"$WINE_BUILD\" ] && ln -sf \"$WINE_BUILD\" \"${DIR}/Wine/wine\" > /dev/null 2>&1\n        break\n\n    elif [ -f \"${DIR}/Wine/wine\" ]; then\n        [ -d \"${DIR}/Wine/wine-build\" ] &&\n            WINE_BUILD=$(find -L \"${DIR}/Wine/wine-build\" -type f -iname \"wine\") 2> /dev/null &&\n            ln -sf \"$WINE_BUILD\" \"${DIR}/Wine/wine\" > /dev/null 2>&1\n        break\n    fi\ndone\n\n# Set wine-build & wineprefix\nWINE=\"$DIR/Wine/wine\"\nWINEPREFIX=\"$DIR/Wine/wine-pfx/\"\n\n# ======================================================================== #\n\n# Launch\ncd \"$DIR\"\ngamemoderun WINEPREFIX=\"$WINEPREFIX\" \"$WINE\" \"$EXE\" $ARGS &\necho -e \"\\nLaunching $DIR/$EXE\\n\" | sed 's/\\.\\///g'\n\n# Before Launch\nwhile ! pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    $COMP_Disabled\n    sleep 5\n    killall lutris\n    killall cairo-dock\n\n# After Launch\nwhile pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    $COMP_Enabled\n    cairo-dock > /dev/null 2>&1 &\n    sleep 5\n    killall gamemoded &\n    exit\n", "\n", "# Launch\ncd \"$DIR\"\ngamemoderun WINEPREFIX=\"$WINEPREFIX\" \"$WINE\" \"$EXE\" $ARGS &\necho -e \"\\nLaunching $DIR/$EXE\\n\" | sed 's/\\.\\///g'\n\n# Before Launch\nwhile ! pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    $COMP_Disabled\n    sleep 5\n    killall lutris\n    killall cairo-dock\n\n# After Launch\nwhile pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    $COMP_Enabled\n    cairo-dock > /dev/null 2>&1 &\n    sleep 5\n    killall gamemoded &\n    exit", "killall lutris\n    killall cairo-dock\n\n# After Launch\nwhile pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    qdbus org.kde.KWin /Compositor resume\n    $HOME/Scripts/Bash/Polybar/launch.sh\n    cairo-dock > /dev/null 2>&1 &\n    killall UnrealCEFSubProcess.exe\n    sleep 5\n    killall gamemoded &\n    exit", "# Launch\ncd \"$DIR\"\ngamemoderun WINEPREFIX=\"$WINEPREFIX\" \"$WINE\" \"$EXE\" $ARGS &\necho \"Launching $DIR/$EXE\"\n\n# Before Launch\nwhile ! pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    qdbus org.kde.KWin /Compositor suspend\n    killall polybar\n    sleep 5\n    killall lutris\n    killall cairo-dock\n\n# After Launch\nwhile pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    qdbus org.kde.KWin /Compositor resume\n    $HOME/Scripts/Bash/Polybar/launch.sh\n    cairo-dock > /dev/null 2>&1 &\n    killall UnrealCEFSubProcess.exe\n    sleep 5\n    killall gamemoded &\n    exit\n\n# ======================================================================== #", "UnrealCEFSubProcess", "    killall UnrealCEFSubProcess.exe\n", "#!/bin/bash\n\n# ======================================================================== #\n\n# Game Directory\nDIR=$(dirname \"$(realpath \"$0\")\" | sed -s \"s|/Wine||g\")\n\n# Game Executable\nEXE=\"./Grounded.exe\"\nPROCESS=\"Grounded.exe\"\nARGS=\"\"\n\n# Wine Directories\nWINE=\"$DIR/Wine/wine\"\nWINEPREFIX=\"$DIR/Wine/wine-pfx/\"\n\n# Environment\nexport WINEDLLOVERRIDES=\"mscoree,mshtml=\"\nexport WINEFSYNC=1\nexport MANGOHUD=1\nexport ENABLE_VKBASALT=1\n\n# ======================================================================== #\n\n# Launch\ncd \"$DIR\"\ngamemoderun WINEPREFIX=\"$WINEPREFIX\" \"$WINE\" \"$EXE\" $ARGS &\necho -e \"\\nLaunching $DIR/$EXE\\n\" | sed 's/\\.\\///g'\n\n# Before Launch\nwhile ! pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    $COMP_Disabled\n    sleep 5\n    killall lutris\n    killall cairo-dock\n\n# After Launch\nwhile pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    $COMP_Enabled\n    cairo-dock > /dev/null 2>&1 &\n    \n    sleep 5\n    killall gamemoded &\n    exit\n", "    \n", "# Compositor\nCOMP_Disabled=\"killall picom\"\nCOMP_Enabled=\"picom -cCGb\"\n\n# Game Executable\nEXE=\"./bin/x64/Game.exe\"\nPROCESS=\"Game.exe\"\nARGS=\"-vulkan\"", "\n# Compositor\nCOMP_Disabled=\"killall picom\"\nCOMP_Enabled=\"picom -cCGb\"\n", "# Current Directory\nDIR=$(dirname \"$(realpath \"$0\")\" | sed -s \"s|/Wine||g\")\n\n# Compositor\nCOMP_Disabled=\"killall picom\"\nCOMP_Enabled=\"picom -cCGb\"", "# Game Directory\nDIR=$(dirname \"$(realpath \"$0\")\" | sed -s \"s|/Wine||g\")\n", "export __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1\nexport __GL_SHADER_DISK_CACHE=1\nexport __GL_SHADER_DISK_CACHE_PATH=\"$DIR\"", "-Launch-Game_Template", "-", "_Launch-Game_Template", "_", "__GL_THREADED_OPTIMIZATIONS", "#export __GL_THREADED_OPTIMIZATIONS=1 # NVIDIA\n", "amd or nvidia", "\n\nI do not know of a direct equivalent, but lshw should give you the info you want, try:\n\nsudo lshw -C display\n", "sudo lshw -C display", "lshw -C display", "http://www.cyberciti.biz/faq/howto-find-linux-vga-video-card-ram", "https://wiki.archlinux.org/index.php/NVIDIA", "\nActive 3 months ago\nViewed 1.0m times\n231\n76\n\nI'm looking for a command that would give me the same info as:\n\ncat /proc/cpuinfo \n\nExcept for the GPU (type of the chip and memory, frequency).\ncommand-line\ngraphics\ngpu\n\ufeff\nShare\nImprove this question\nFollow\nedited Dec 15 '17 at 1:36\nmuru\n167k4242 gold badges393393 silver badges623623 bronze badges\nasked Oct 9 '10 at 17:14\nuser2413\n11.2k1414 gold badges4848 silver badges8080 bronze badges\n\n    what does: cat /proc/cpuinfo do? what info are you looking for? \u2013 Charlie Parker Mar 5 '18 at 17:00\n    2\n    @CharlieParker it outputs information of the cpu... \u2013 Emobe Sep 11 '19 at 8:46\n\nAdd a comment\n22 Answers\n111\n\nThat type of information is non-standard, and the tools you will use to gather it vary widely.\n\nThe command glxinfo will give you all available OpenGL information for the graphics processor, including its vendor name, if the drivers are correctly installed.\n\nTo get clock speed information, there is no standard tool.\n\n    For ATI/AMD GPUs running the old Catalyst driver, aticonfig --odgc should fetch the clock rates, and aticonfig --odgt should fetch the temperature data. I'm not familiar with AMDGPU-Pro, but a similar tool should exist.\n    For NVIDIA GPUs, the nvidia-smi tool will show all of the information you could want, including clock speeds and usage statistics.\n\nI am not aware of an equivalent tool for the open source drivers or for Intel or other GPUs, but other information on the hardware can be fetched from the lspci and lshw tools.\n\ufeff\nShare\nImprove this answer\nFollow\nedited Jun 2 '20 at 18:17\nanswered Oct 9 '10 at 17:30\ngreyfade\n1,82722 gold badges1414 silver badges77 bronze badges\n\n    3\n    How to install glxinfo? \u2013 stiv Mar 13 '15 at 13:40\n    11\n    @stiv: It's part of the Mesa library, and comes with the package mesa-utils on Ubuntu. \u2013 greyfade Mar 13 '15 at 18:20\n    4\n    aticonfig doesn't appear to be available since the retirement of fglrx. nvclock also appears to have been abandoned since the last version was for trusty. Do you have any updated solutions? Here's what I have so far.. \u2013 Elder Geek Dec 14 '17 at 23:16\n    4\n    glxinfo | grep \"Device\" worked well enough for me on an Intel GPU \u2013 John Hamilton May 26 '18 at 14:10\n    3\n    I use: glxinfo | egrep -i 'device|memory' \u2013 danger89 Jan 2 '19 at 20:37\n\nShow 3 more comments\n246\n\nI do not know of a direct equivalent, but lshw should give you the info you want, try:\n\nsudo lshw -C display\n\n(it also works without sudo but the info may be less complete/accurate)\n\nYou can also install the package lshw-gtk to get a GUI.\n\ufeff\nShare\nImprove this answer\nFollow\nanswered Oct 9 '10 at 17:31\nMarcel Stimberg\n34.1k88 gold badges4242 silver badges4545 bronze badges\n\n    3\n    Had to put gksu before the command in the menu to get lshw-gtk to work. \u2013 robin0800 Feb 15 '11 at 10:55\n    Any updates? I'm a fan of the command but the only clock rate (frequency) it seems to provide for me is the base bus clock 33MHz. I'm attempting to bring this Q&A up to date. Thank you! \u2013 Elder Geek Dec 14 '17 at 23:31\n    2\n    Apologies, new to Deep Learning. What should it say if I have a GPU? It says product: 2nd Generation Core Processor Family Integrated Graphics Controller \u2013 Nathan Apr 17 '18 at 2:13\n    1\n    @Nathan That means that you have a GPU....probably a very weak GPU. Your GPU says integrated graphics, which means that it's integrated into the CPU. Your CPU has it own component which functions as a graphics card and probably (to save on costs) uses the ordinary RAM to store its buffers. You do not have a separate independent removable graphics card. \u2013 Jack Giffin May 13 '20 at 0:03 \n\nAdd a comment\n104\n\nA blog post focusing on work done on the command-line is here:\n\nhttp://www.cyberciti.biz/faq/howto-find-linux-vga-video-card-ram/\n\nFind out the device ID:\n\n lspci | grep ' VGA ' | cut -d\" \" -f 1\n03:00.0\n\nYou can then use this output with lspci again, forming two nested commands\n\nlspci  -v -s  $(lspci | grep ' VGA ' | cut -d\" \" -f 1)\n\nIf you have more than 1 GPU card, try this equivalent command instead:\n\nlspci | grep ' VGA ' | cut -d\" \" -f 1 | xargs -i lspci -v -s {}\n\nOutput from my system:\n\n03:00.0 VGA compatible controller: NVIDIA Corporation G98 [Quadro NVS 295] (rev a1) (prog-if 00 [VGA controller])\n    Subsystem: NVIDIA Corporation Device 062e\n    Flags: bus master, fast devsel, latency 0, IRQ 24\n    Memory at f6000000 (32-bit, non-prefetchable) [size=16M]\n    Memory at ec000000 (64-bit, prefetchable) [size=64M]\n    Memory at f4000000 (64-bit, non-prefetchable) [size=32M]\n    I/O ports at dc80 [size=128]\n    [virtual] Expansion ROM at f7e00000 [disabled] [size=128K]\n    Capabilities: <access denied>\n    Kernel driver in use: nvidia\n\nEDIT: You can avoid the <access denied> by launching with sudo\n\nSo, (prefetchable) [size=64M) indicates that I have a 64-MB NVIDIA card. However, I don't, it's rather 256 MB. Why? See below.\n\nTo see how to get the most info and performance out of it, read an extremely comprehensive article on the Arch-Linux Wiki\n\nhttps://wiki.archlinux.org/index.php/NVIDIA\n\nFor nvidia users, start with\n\nnvidia-smi\n", "nvidia-smi", "lspci | grep VGA", "1 ~ /^temp1/", "$1 ~ /^temp1/ ", " start with", "Extract start with", "# Extract start with and print especific characters\nawk '$1 ~ /^temp1/ {print substr($0,16,2)}'", "e", "#!/bin/bash\n\n\n# Extract in between\nawk -F \"START|END\" '{print $2}'\nawk -F \"START|END\" 'NF>1 {print $2}' # Exclude blank lines\n\nawk -v FS=\"(START|END)\" '{print $2}'\nawk -v FS=\"(START|END)\" 'NF>1 {print $2}' # Exclude blank lines\n\nsed -n \"s/.*START\\([^T]*\\)END.*/\\1/p\"\n\n# Extract starts with\ngrep \"^STRING\"\n\nawk '$1 ~ /^STRING/'\n\n# Extract starts with and print specific characters\nawk '$1 ~ /^temp1/ {print substr($0,16,2)}'\n\n# Replace\nsed 's/THIS/THAT/g'\n\n# Check if output is a number\n[[ $1 == ?(-)+([0-9]) ]] && echo \"$1 is an integer\"\n", "print specific characters", "awk '$3 ~ /snow/ { print }' dummy_file ", "if line contain multiple ", "multiple", "awk -F, '$1 ~ /Rent/'", "lspci | ", "NR==1 &&", "awk -v FS=\"(START|END)\" '{print $2}'", "awk -F \"START|END\" '{print $2}'", "if line contains", "; if (/}/) exit", "f(/}/){count--; if(count==0) exit}}' filen", "'/Option_1/,/}/{print; if ($0 ~ /}/) exit}'", "sensors | awk '$1 ~ /^temp1/ {print substr($0,16,2)}' | awk 'NR==1'", "sensors | awk '$1 ~ /^temp1/ {print substr($0,16,2); exit}'", "sensors | ", "STRING", "temp1", "/", "w.youtube.com/c/JCGigamisterios/videos?view=0&sort=p&flow=grid", "JCGigamisterios", "https://www.youtube.com/c/JCGigamisterios/videos?view=0&sort=p&flow=grid", "echo -e \"\\nJaconor 73:\\n$(curl -s \"", "aconor", "JC Gigamisterios", "Jaconor", "Jaconor 73", "c/JCGigamisterios/", "iew=0&sort=p&flow=grid", ".xml?channel_id=", "/videos.xml?channel_id=", "/feeds/videos.xml?channel_id=", "/videos?view=0&sort=p&flow=grid", " | awk -F \"<media:title>|</media:title>\" 'NF>1 {print $2}')\"", "UCQ3zNtUFa8nSG1Tncsr-cWQ", " ", "int $2}')\"", "print", "    echo -e \"\\nJC Gigamisterios:\\n$(curl -s \"https://www.youtube.com/feeds/videos.xml?channel_id=UCQ3zNtUFa8nSG1Tncsr-cWQ\"| awk -F \"<media:title>|</media:title>\" 'NF>1 {print $2}')\"\n", "https://www.youtube.com/feeds/videos.xml?channel_id=UCQ3zNtUFa8nSG1Tncsr-cWQ", "curl -s \"https://www.youtube.com/feeds/videos.xml?channel_id=UCQ3zNtUFa8nSG1Tncsr-cWQ\"| awk -F \"<media:title>|</media:title>\" 'NF>1 {print $2}'", "NR > 1 { exit }; 1", "picom -cCGb &", "killall", "pgrep -x picom && killall picom\n", "pgrep -x firewall-applet && killall firewall-applet\npgrep -x nm-applet && killall nm-applet\npgrep -x cairo-dock && killall cairo-dock\npgrep -x easystroke && killall easystroke", "\nsetxkbmap -layout es &\n\nfeh --bg-fill --no-fehbg --randomize ~/Pictures/Desktop/* &\n\npolybar.sh &\n\nfirewall-applet &\n\nnm-applet --sm-disable &\n\ncairo-dock &\n\neasystroke &\n\nimwheel.sh &\n\nexec qtile", "# Autostart\nexport PATH=$PATH:$HOME/Scripts/Shell/Autostart/\n\npgrep -x firewall-applet && killall firewall-applet\npgrep -x nm-applet && killall nm-applet\npgrep -x cairo-dock && killall cairo-dock\npgrep -x easystroke && killall easystroke\n\n# nvidia_led.sh &\n\n# nvidia-settings --load-config-only &\n\npicom -cCGb &\n\nsetxkbmap -layout es &\n\nset_background.sh &\n\nfirewall-applet &\n\nnm-applet --sm-disable &\n\ncairo-dock &\n\neasystroke &\n\nimwheel.sh &\n\nexec qtile", "# Autostart\nexport PATH=$PATH:$HOME/Scripts/Shell/Autostart/\n\nnvidia_led.sh &\n\nnvidia-settings --load-config-only &\n\npicom -cCGb &\n\nsetxkbmap -layout es &\n\nfeh --bg-fill --no-fehbg --randomize ~/Pictures/Desktop/* &\n\npolybar.sh &\n\nfirewall-applet &\n\nnm-applet --sm-disable &\n\ncairo-dock &\n\neasystroke &\n\nimwheel.sh &\n\nexec qtile", "sudo nvim /usr/share/xsessions/qtile.desktop", "\nsudo nvim /usr/share/xsessions/qtile.desktop\n# ======================================================================================= #\n[Desktop Entry]\nName=Qtile\nComment=Qtile Session\nExec=~/.xinitrc\nType=Application\nKeywords=wm;tiling\n# ======================================================================================= #", "Transmission"], "CLIPBOARD": ["def notf():\n    lambda: subprocess.getoutput('~/.config/qtile/scripts/notifications.sh')", "notf", "gpu_temp", "mb_temp", "/home/govi/.config/polybar/scripts/cpu_temp.sh\n", "application/x-desktop", "/home/govi/Pictures/GoVi-Theme/GoVi_gtk/GoVi_gtk-Icons/mimetypes/64/text-x-script.svg\n", "/home/govi/Downloads/Deepin-4All/Deepin-4All\n", "\n# Bad lectures\n#sensors | grep \"Package id 0:\" | tr -d 'Package id 0:(hh=8.,rt=1.+)' | cut -c -5\n\n# Works on terminal not in polybar though\n#     echo -e \ud83c\udf21 \"\\e[38;5;26m\"$temp\" \u00b0C\"\n\n# Search temperature output\n# for i in /sys/class/hwmon/hwmon*/temp*_input; do echo \"$(<$(dirname $i)/name): $(cat ${i%_*}_label 2>/dev/null || echo $(basename ${i%_*})) $(readlink -f $i)\"; done\n", " %{T3}0 %{T-}%{F#0095ff}", "%{F#fdbc4b}", "%{F-}\n", "%{F#f90e39}", " '/home/govi/.config/qtile/scripts/cpu_temp.sh'", "mb_temp = open('/sys/devices/platform/it87.2608/hwmon/hwmon2/temp1_input', 'r')\n", "cat /sys/devices/platform/coretemp.0/hwmon/hwmon1/temp1_input | cut -c -2", "/home/govi/.config/qtile/scripts/cpu_temp.sh", "cpu_temp = subprocess.getoutput('/home/govi/.config/qtile/scripts/cpu_temp.sh')\n", "widget.GenPollText(func=gpu_temp, update_interval=1, foreground=", "notf = subprocess.getoutput('~/.config/qtile/scripts/notifications.sh')", "cpu_temp = subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh')\n", "\u00b0C ", "~/.config/qtile/scripts/email.sh", "subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh')", "subprocess.getoutput('~/.config/qtile/scripts/gpu_temp.sh')", "subprocess.getoutput('~/.config/qtile/scripts/notifications.')", "                widget.TextBox(font='GoVi_Icons', text='H'),\n", "                widget.TextBox(font='GoVi_Icons', text='3'),\n", "0", " ", "font='GoVi_Icons',", "    echo \"\ud83d\udd25 $temp\u00b0C \"\n\n", "                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_up.png'),\n", "t", "lambda: subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh'", "~/.config/polybar/scripts/notf_switch.sh", "'Button1': ", "subprocess.run('~/.config/polybar/scripts/notf_switch.sh')", "subprocess.run('~/.config/qtile/scripts/notf_switch.sh')", "subprocess.call('~/.config/qtile/scripts/notf_switch.sh', shell=True)", "lambda:", "~/.config/qtile/scripts/notf_switch.sh", "margin=7,", "margin=15", ", margin=9", "subprocess", "                    update_interval=1),\n", "os.system('~/.config/qtile/scripts/notf_switch.sh')", "lambda: ", "mouse_callbacks", "qtile.cmd_spawn", "lambda qtile: qtile.cmd_spawn", "'Button1': lambda qtile: qtile.cmd_spawn", "os.system", "                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/notf_switch.sh')}),\n", "firefox \"http://www.gmail.com\"", "'sh -c ~/.config/qtile/scripts/notf_switch.sh'", "rss_youtube_Reset.sh", "                    mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/rss_youtube_Reset.sh')}),\n", "                    mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/rss_games_Reset.sh')}),\n", "github", "qtile", "e", "o", "l", "y", "b", "a", "r", "/home/govi/.config/polybar/scripts/system_update.sh\n/home/govi/.config/polybar/scripts/updates_AUR.sh\n/home/govi/.config/polybar/scripts/updates_pacman.sh\n", "/home/govi/.config/qtile/scripts/rss_youtube_Reset.sh", "lazy.restart()", "cmd_restart", "padding=3", ", margin=8),", "http://www.gmail.com", "                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('firefox \"http://www.gmail.com\"')}),\n", "                widget.Spacer(length=3),\n", "                widget.Spacer(length=2),\n", "notf_ON", "                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_github_not.sh'),\n                    update_interval=300, fontsize=12),", "                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/updates_pacman.sh'),\n                                   update_interval=300, fontsize=12),", "font='GoVi_Icons'", "        touch ~/.config/qtile/scripts/updates-pacman_icon\n", "/home/govi/.config/qtile/scripts/updates_pacman.sh\n", "~/.config/qtile/scripts/updates-pacman_icon", "def cpu_icon():\n    if cpu_temp < 55:\n        print(\"text='0'\", end='')\n    else:\n        print(\"text='\ud83d\udd25'\", end='')", "cpu_icon", "fmt", "cpu_temp = subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh | cut -c1-2')\ncpu_temp = int(cpu_temp)", "def cpu_icon():\n    cpu_temp = subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh | cut -c1-2')\n    cpu_temp = int(cpu_temp)\n\n    if cpu_temp <= 50:\n        return str('0')\n\n    elif cpu_temp >= 51:\n        return str('\ud83d\udd25')", "nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits", "cat \"/sys/devices/platform/it87.2608/hwmon/hwmon2/temp1_input\" | cut -c -2", "paru -Qua | wc -l | cut -c1-1", "updates_aur", "mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/rss_github_Reset.sh')}", "mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('&FILEMANAGER  /')}", "mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('spacefm  /')})", " '/home/govi/Programs/Adobe/Wine/Launch-Photoshop.sh'", "/home/govi/Downloads/Godfall.v2.4.44-0xdeadc0de/Godfall/Aperion\n/home/govi/Downloads/Godfall.v2.4.44-0xdeadc0de/Godfall/Engine\n/home/govi/Downloads/Godfall.v2.4.44-0xdeadc0de/Godfall/OnlineFix\n/home/govi/Downloads/Godfall.v2.4.44-0xdeadc0de/Godfall/Aperion.exe\n/home/govi/Downloads/Godfall.v2.4.44-0xdeadc0de/Godfall/Launcher.exe\n/home/govi/Downloads/Godfall.v2.4.44-0xdeadc0de/Godfall/Manifest_DebugFiles_Win64.txt\n/home/govi/Downloads/Godfall.v2.4.44-0xdeadc0de/Godfall/Manifest_NonUFSFiles_Win64.txt\n/home/govi/Downloads/Godfall.v2.4.44-0xdeadc0de/Godfall/OnlineFixLauncher.ini\n", "v0.143.5", "/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/files/archive\n/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/files/bin\n/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/files/engine\n/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/files/r6\n/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/files/gog.ico\n/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/files/goggame-1423049311.hashdb\n/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/files/goggame-1423049311.ico\n/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/files/goggame-1423049311.info\n/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/files/goggame-galaxyFileList.ini\n/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/files/goglog.ini\n/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/files/Launch Cyberpunk 2077.lnk\n/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/files/support.ico\n", "/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/prefix\n/home/govi/Games/PC/Cyberpunk 2077/Cyberpunk.2077/game/wine\n", "/home/govi/Games/PC/Cyberpunk 2077/wine-build\n", " '/home/govi/Games/PC/Cyberpunk 2077/Wine/wine-build/bin/wine64'", "/home/govi/wine64\n", "wine-pfx", "/home/govi/Games/PC/Cyberpunk 2077/wine-pfx\n", "/home/govi/Games/PC/Dyson Sphere Program/Wine\n", "#!/bin/bash\n\n# ======================================================================== #\n\n# Current Directory\nDIR=$(dirname \"$(realpath \"$0\")\" | sed -s \"s|/Wine||g\")\n\n# Compositor\nCOMP_Disabled=\"killall picom\"\nCOMP_Enabled=\"picom -cCGb\"\n\n# Game Executable\nEXE=\"./bin/x64/Game.exe\"\nPROCESS=\"Game.exe\"\nARGS=\"-vulkan\"\n\n# Environment\nexport WINEDLLOVERRIDES=\"mscoree,mshtml=\"\nexport WINEFSYNC=1\nexport MANGOHUD=1\nexport ENABLE_VKBASALT=1\nexport __GL_THREADED_OPTIMIZATIONS=1 # NVIDIA\nexport __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1\nexport __GL_SHADER_DISK_CACHE=1\nexport __GL_SHADER_DISK_CACHE_PATH=\"$DIR\"\n\n# ======================================================================== #\n\n# Chech if the script is in Wine directory\nLAUNCH_GAME=\"$(find \"${DIR}/Wine\" -type f -iname \"Launch-*\")\"\n\nwhile true; do\n    if [ ! -f \"$LAUNCH_GAME\" ]; then clear & sleep 1\n        echo -e '\\nThis Script needs to be in a folder called \"Wine\", with the prename \"Launch-\" (example: Launch-My_Game.sh) inside the Game folder.'\n        [ ! -d \"${DIR}/Wine\" ] &&\n            echo -e \"\\nCreating one in the current directory...\" && sleep 2 &&\n            mkdir -p \"${DIR}/Wine\"\n        echo -e '\\nPlease, put this script in it and put \"Wine\" folder whatever you want in the Game folder.'\n        read -rsn1 -p \"$(echo -e \"\\nPress any key to close this script, make the changes and run it again...\")\"; echo &\n        exit\n\n    else\n        break\n    fi\ndone\n\n# Chech if wine-pfx exist\nwhile true; do\n    if [ ! -f \"${DIR}/Wine/wine-pfx/system.reg\" ]; then clear & sleep 1\n        echo -e \"\\nThere is not a valid wine-pfx folder.\\nThis is neccesary to run this script.\"\n        [ ! -d \"${DIR}/Wine/wine-pfx\" ] &&\n            echo -e \"\\nCreating wine-pfx folder...\" && sleep 2 &&\n            mkdir -p \"${DIR}/Wine/wine-pfx\"\n        echo -e '\\nPlease, copy a valid wine-prefix in \"wine-pfx\" folder or delete the created folder and create a symlink to a valid wineprefix and call the symlink \"wine-pfx\"'\n        read -rsn1 -p \"$(echo -e \"\\nPress any key to continue...\")\"\n\n    elif [ -f \"${DIR}/Wine/wine-pfx/system.reg\" ]; then\n        break\n    fi\ndone\n\n# Chech if wine-build exist\nwhile true; do\n    if [ ! -d \"${DIR}/Wine/wine-build\" ] && [ ! -f \"${DIR}/Wine/wine\" ]; then clear & sleep 1\n        echo -e '\\nThere is not a valid \"wine-build folder\" or symlink to a \"wine\" file\\nThis is neccesary to run this script'\n        [ ! -d \"${DIR}/Wine/wine-build\" ] &&\n            echo -e \"\\nCreating wine-build folder...\" && sleep 2 &&\n            mkdir -p \"${DIR}/Wine/wine-build\"\n        echo -e '\\nPlease, copy a valid wine-build in \"wine-build\" folder or delete the created folder and create a symlink to a valid \"wine-build\" folder and call the symlink \"wine-build.\\nOr create a symlink to a \"wine\" file\"'\n        read -rsn1 -p \"$(echo -e \"\\nPress any key to continue...\")\"\n\n    elif [ -d \"${DIR}/Wine/wine-build\" ]; then\n        WINE_BUILD=$(find -L \"${DIR}/Wine/wine-build\" -type f -iname \"wine\") 2> /dev/null\n        [ -f \"$WINE_BUILD\" ] && ln -sf \"$WINE_BUILD\" \"${DIR}/Wine/wine\" > /dev/null 2>&1\n        break\n\n    elif [ -f \"${DIR}/Wine/wine\" ]; then\n        [ -d \"${DIR}/Wine/wine-build\" ] &&\n            WINE_BUILD=$(find -L \"${DIR}/Wine/wine-build\" -type f -iname \"wine\") 2> /dev/null &&\n            ln -sf \"$WINE_BUILD\" \"${DIR}/Wine/wine\" > /dev/null 2>&1\n        break\n    fi\ndone\n\n# Set wine-build & wineprefix\nWINE=\"$DIR/Wine/wine\"\nWINEPREFIX=\"$DIR/Wine/wine-pfx/\"\n\n# ======================================================================== #\n\n# Launch\ncd \"$DIR\"\ngamemoderun WINEPREFIX=\"$WINEPREFIX\" \"$WINE\" \"$EXE\" $ARGS &\necho -e \"\\nLaunching $DIR/$EXE\\n\" | sed 's/\\.\\///g'\n\n# Before Launch\nwhile ! pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    $COMP_Disabled\n    killall polybar\n    sleep 5\n    killall lutris\n    killall cairo-dock\n\n# After Launch\nwhile pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    $COMP_Enabled\n    ~/.config/polybar/launch.sh\n    cairo-dock > /dev/null 2>&1 &\n    sleep 5\n    killall gamemoded\n    exit\n", "#!/bin/bash\n\n# ======================================================================== #\n\n# Current Directory\nDIR=$(dirname \"$(realpath \"$0\")\" | sed -s \"s|/Wine||g\")\n\n# Compositor\nCOMP_Disabled=\"killall picom\"\nCOMP_Enabled=\"picom -cCGb\"\n\n# Game Executable\nEXE=\"./bin/x64/Game.exe\"\nPROCESS=\"Game.exe\"\nARGS=\"-vulkan\"\n\n# Environment\nexport WINEDLLOVERRIDES=\"mscoree,mshtml=\"\nexport WINEFSYNC=1\nexport MANGOHUD=1\nexport ENABLE_VKBASALT=1\nexport __GL_THREADED_OPTIMIZATIONS=1 # NVIDIA\nexport __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1\nexport __GL_SHADER_DISK_CACHE=1\nexport __GL_SHADER_DISK_CACHE_PATH=\"$DIR\"\n\n# ======================================================================== #\n\n# Chech if the script is in Wine directory\nLAUNCH_GAME=\"$(find \"${DIR}/Wine\" -type f -iname \"Launch-*\")\"\n\nwhile true; do\n    if [ ! -f \"$LAUNCH_GAME\" ]; then clear & sleep 1\n        echo -e '\\nThis Script needs to be in a folder called \"Wine\", with the prename \"Launch-\" (example: Launch-My_Game.sh) inside the Game folder.'\n        [ ! -d \"${DIR}/Wine\" ] &&\n            echo -e \"\\nCreating one in the current directory...\" && sleep 2 &&\n            mkdir -p \"${DIR}/Wine\"\n        echo -e '\\nPlease, put this script in it and put \"Wine\" folder whatever you want in the Game folder.'\n        read -rsn1 -p \"$(echo -e \"\\nPress any key to close this script, make the changes and run it again...\")\"; echo &\n        exit\n\n    else\n        break\n    fi\ndone\n\n# Chech if wine-pfx exist\nwhile true; do\n    if [ ! -f \"${DIR}/Wine/wine-pfx/system.reg\" ]; then clear & sleep 1\n        echo -e \"\\nThere is not a valid wine-pfx folder.\\nThis is neccesary to run this script.\"\n        [ ! -d \"${DIR}/Wine/wine-pfx\" ] &&\n            echo -e \"\\nCreating wine-pfx folder...\" && sleep 2 &&\n            mkdir -p \"${DIR}/Wine/wine-pfx\"\n        echo -e '\\nPlease, copy a valid wine-prefix in \"wine-pfx\" folder or delete the created folder and create a symlink to a valid wineprefix and call the symlink \"wine-pfx\"'\n        read -rsn1 -p \"$(echo -e \"\\nPress any key to continue...\")\"\n\n    elif [ -f \"${DIR}/Wine/wine-pfx/system.reg\" ]; then\n        break\n    fi\ndone\n\n# Chech if wine-build exist\nwhile true; do\n    if [ ! -d \"${DIR}/Wine/wine-build\" ] && [ ! -f \"${DIR}/Wine/wine\" ]; then clear & sleep 1\n        echo -e '\\nThere is not a valid \"wine-build folder\" or symlink to a \"wine\" file\\nThis is neccesary to run this script'\n        [ ! -d \"${DIR}/Wine/wine-build\" ] &&\n            echo -e \"\\nCreating wine-build folder...\" && sleep 2 &&\n            mkdir -p \"${DIR}/Wine/wine-build\"\n        echo -e '\\nPlease, copy a valid wine-build in \"wine-build\" folder or delete the created folder and create a symlink to a valid \"wine-build\" folder and call the symlink \"wine-build.\\nOr create a symlink to a \"wine\" file\"'\n        read -rsn1 -p \"$(echo -e \"\\nPress any key to continue...\")\"\n\n    elif [ -d \"${DIR}/Wine/wine-build\" ]; then\n        WINE_BUILD=$(find -L \"${DIR}/Wine/wine-build\" -type f -iname \"wine\") 2> /dev/null\n        [ -f \"$WINE_BUILD\" ] && ln -sf \"$WINE_BUILD\" \"${DIR}/Wine/wine\" > /dev/null 2>&1\n        break\n\n    elif [ -f \"${DIR}/Wine/wine\" ]; then\n        [ -d \"${DIR}/Wine/wine-build\" ] &&\n            WINE_BUILD=$(find -L \"${DIR}/Wine/wine-build\" -type f -iname \"wine\") 2> /dev/null &&\n            ln -sf \"$WINE_BUILD\" \"${DIR}/Wine/wine\" > /dev/null 2>&1\n        break\n    fi\ndone\n\n# Set wine-build & wineprefix\nWINE=\"$DIR/Wine/wine\"\nWINEPREFIX=\"$DIR/Wine/wine-pfx/\"\n\n# ======================================================================== #\n\n# Launch\ncd \"$DIR\"\ngamemoderun WINEPREFIX=\"$WINEPREFIX\" \"$WINE\" \"$EXE\" $ARGS &\necho -e \"\\nLaunching $DIR/$EXE\\n\" | sed 's/\\.\\///g'\n\n# Before Launch\nwhile ! pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    $COMP_Disabled\n    sleep 5\n    killall lutris\n    killall cairo-dock\n\n# After Launch\nwhile pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    $COMP_Enabled\n    cairo-dock > /dev/null 2>&1 &\n    sleep 5\n    killall gamemoded\n    exit\n", "valheim.exe", " '/home/govi/Wine/wine_6.2/wine-build_tkg/usr/bin/wine'", "/home/govi/wine\n/home/govi/wine64\n", " '/home/govi/Games/PC/Valheim/Wine/Launch-Valheim.sh'", "/home/govi/Wine/wine_6.2/wine\n", "/home/govi/Wine/wine_6.1/wine\n", "/home/govi/Wine/wine_6.0/wine\n", "Valheim", "/sys/devices/platform/", "sensors | grep \"edge\" | awk '{print $2}' | cut -b2-3", "awk -F '\\+|\\.' 'NF>1 {print $2}'", "'{print substr($0,2,6)}'", "sensors | awk '$1 ~ /^Package/ {print substr($0,17,2)}'", "sensors | awk '$1 ~ /^edge:/ {print substr($0,16,2)}'", "NR < 1", "NR > 1 { exit }; 1", "/home/govi/.config/qtile/scripts/rss_youtube.sh", "sensors | awk '$1 ~ /^temp1/ {print substr($0,16,2)} NR > 1 { exit }; 1'", "NR==52", "enable_experimental_conpty_backend", "\\", "\\[\\033[1;32m\\]\\u:\\[\\033[1;34m\\] \\W\\[\\033[1;34m\\] \\$\\[\\033[0m\\]", "shopt checkwinsize", "PS1=$'\\e[0;31m$ \\e[0m'", "\\e[0;31m$ \\e[0m", "PS1=\"%{$fg[red]%}%n%{$reset_color%}@%{$fg[blue]%}%m %{$fg[yellow]%}%~ %{$reset_color%}%% \"", "PS1=\"%{$fg[red]%}%n%{$reset_color%}@%{$fg[blue]%}%m %{$fg[yellow]%}%(5~|%-1~/.../%3~|%4~) %{$reset_color%}%% \"", "%\\", "PS1=\"%{%F{red}%}%n%{%f%}@%{%F{blue}%}%m %{%F{yellow}%}%~ %{$%f%}%% \"", "%B%", "{%F{yellow}%}", "{%F{green}%}:", "{%F{red}[%}", "%f%", "'NR>1'", "sensors | awk '$1 ~ /^temp1/ {print substr($0,16,2)}' | awk 'NR==1'", "FNR==i", "~/.config/qtile/scripts/cpu_temp.sh", "/usr/share/xsessions/qtile.desktop", "~/.xinitrc", "def open_calendar(qtile):  # spawn calendar widget\n    qtile.cmd_spawn('gsimplecal next_month')", "ulauncher", "open_ulauncher", "lambda qtile: ", "-o cmd -f restart  ", "qtile cmd-obj", "cairo-dock > /dev/null 2>&1 & exit", "qtile cmd-obj -o cmd", " -f restart", "cairo-dock &", "autostart = [\n        \"sh ~/.xinitrc\",\n]\n\nfor x in autostart:\n    os.system(x)", "qtile cmd-obj -o cmd -f restart", "zenity --info --text \"RSS YouTube Restarted\" 2> /dev/null", "pgrep -x firewall-applet || firewall-applet &", "pgrep -x firewall-applet || ", "nm-applet", "cairo-dock", "easystroke", "pgrep -x picom ||", "pgrep -x picom && killall picom\n", "# Compositor\nCOMP_Disabled=\"killall picom\"\nCOMP_Enabled=\"picom -cCGb\"", "# Launch\ncd \"$DIR\"\ngamemoderun WINEPREFIX=\"$WINEPREFIX\" \"$WINE\" \"$EXE\" $ARGS &\necho -e \"\\nLaunching $DIR/$EXE\\n\" | sed 's/\\.\\///g'\n\n# Before Launch\nwhile ! pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    $COMP_Disabled\n    sleep 5\n    killall lutris\n    killall cairo-dock\n\n# After Launch\nwhile pgrep -x \"$PROCESS\" > /dev/null; do sleep 1; done\n    $COMP_Enabled\n    cairo-dock > /dev/null 2>&1 &\n    sleep 5\n    killall gamemoded &\n    exit", "    killall UnrealCEFSubProcess.exe\n", "\n# Compositor\nCOMP_Disabled=\"killall picom\"\nCOMP_Enabled=\"picom -cCGb\"\n", "# Current Directory\nDIR=$(dirname \"$(realpath \"$0\")\" | sed -s \"s|/Wine||g\")\n\n# Compositor\nCOMP_Disabled=\"killall picom\"\nCOMP_Enabled=\"picom -cCGb\"", "export __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1\nexport __GL_SHADER_DISK_CACHE=1\nexport __GL_SHADER_DISK_CACHE_PATH=\"$DIR\"", "/home/govi/Games/PC/Grounded/Wine/Launch-Grounded.sh\n", "/home/govi/Games/PC/Cyberpunk 2077/Wine/Launch-Cyberpunk_2077.sh\n", "/home/govi/Games/PC/Valheim/Launch-Valheim.sh\n", "#export __GL_THREADED_OPTIMIZATIONS=1 # NVIDIA\n", "# Extract start with and print especific characters\nawk '$1 ~ /^temp1/ {print substr($0,16,2)}'", "awk '$3 ~ /snow/ { print }' dummy_file ", "awk -F, '$1 ~ /Rent/'", "NR==1 &&", "awk -v FS=\"(START|END)\" '{print $2}'", "awk -F \"START|END\" '{print $2}'", "; if (/}/) exit", "'/Option_1/,/}/{print; if ($0 ~ /}/) exit}'", "sensors | awk '$1 ~ /^temp1/ {print substr($0,16,2); exit}'", "STRING", "https://www.youtube.com/c/JCGigamisterios/videos?view=0&sort=p&flow=grid", "JC Gigamisterios", ".xml?channel_id=", "/feeds/videos.xml?channel_id=", "UCQ3zNtUFa8nSG1Tncsr-cWQ", "https://www.youtube.com/feeds/videos.xml?channel_id=UCQ3zNtUFa8nSG1Tncsr-cWQ", "curl -s \"https://www.youtube.com/feeds/videos.xml?channel_id=UCQ3zNtUFa8nSG1Tncsr-cWQ\"| awk -F \"<media:title>|</media:title>\" 'NF>1 {print $2}'", "pgrep -x firewall-applet && killall firewall-applet\npgrep -x nm-applet && killall nm-applet\npgrep -x cairo-dock && killall cairo-dock\npgrep -x easystroke && killall easystroke", "# Autostart\nexport PATH=$PATH:$HOME/Scripts/Shell/Autostart/\n\npgrep -x firewall-applet && killall firewall-applet\npgrep -x nm-applet && killall nm-applet\npgrep -x cairo-dock && killall cairo-dock\npgrep -x easystroke && killall easystroke\n\n# nvidia_led.sh &\n\n# nvidia-settings --load-config-only &\n\npicom -cCGb &\n\nsetxkbmap -layout es &\n\nset_background.sh &\n\nfirewall-applet &\n\nnm-applet --sm-disable &\n\ncairo-dock &\n\neasystroke &\n\nimwheel.sh &\n\nexec qtile"]}