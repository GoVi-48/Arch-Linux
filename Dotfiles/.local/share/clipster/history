{"PRIMARY": ["# Copyright (c) 2010 Aldo Cortesi\n# Copyright (c) 2010, 2014 dequis\n# Copyright (c) 2012 Randall Ma\n# Copyright (c) 2012-2014 Tycho Andersen\n# Copyright (c) 2012 Craig Barnes\n# Copyright (c) 2013 horsik\n# Copyright (c) 2013 Tao Sauvage\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nfrom typing import List  # noqa: F401\nfrom libqtile import bar, layout, widget\nfrom libqtile.config import Click, Drag, Group, Key, Screen, Match\nfrom libqtile.lazy import lazy\nfrom libqtile.utils import guess_terminal\nfrom libqtile.widget import base\nimport subprocess\nimport os\n\nmod = \"mod4\"\nterminal = guess_terminal()\n\n\n# ================================= SHORTCUTS =================================  #\nkeys = [\n    # Switch between windows in current stack pane\n    Key([mod], \"k\", lazy.layout.down()),\n    Key([mod], \"j\", lazy.layout.up()),\n\n    # Move windows up or down in current stack\n    Key([mod, \"control\"], \"k\", lazy.layout.shuffle_down()),\n    Key([mod, \"control\"], \"j\", lazy.layout.shuffle_up()),\n\n    # Window grow Left\n    Key([mod, \"control\"], \"Left\",\n        lazy.layout.grow_left(),\n        lazy.layout.shrink(),\n        lazy.layout.decrease(),\n        lazy.layout.add()),\n\n    # Window grow Right\n    Key([mod, \"control\"], \"Right\",\n        lazy.layout.grow_right(),\n        lazy.layout.grow(),\n        lazy.layout.increase_ratio(),\n        lazy.layout.delete()),\n\n    # Switch window focus to other pane(s) of stack\n    Key([mod], \"space\", lazy.layout.next()),\n\n    # Swap panes of split stack\n    Key([mod, \"shift\"], \"space\", lazy.layout.rotate()),\n\n    # Toggle between split and unsplit sides of stack.\n    Key([mod, \"shift\"], \"Return\", lazy.layout.toggle_split()),\n\n    # Toggle between different layouts as defined below\n    Key([mod], \"Tab\", lazy.next_layout()),\n\n    # Kill Window\n    Key([mod], \"w\", lazy.window.kill()),\n\n    # Terminal\n    Key([mod], \"t\", lazy.spawn(terminal)),\n\n    # Run Command\n    Key([mod], \"r\", lazy.spawncmd()),\n\n    # Restart Shutdown\n    Key([mod, \"control\"], \"r\", lazy.restart()),\n    Key([mod, \"control\"], \"q\", lazy.shutdown()),\n\n]\n\n\n# ================================= GROUPS =================================  #\ndef window_to_prev_group(qtile):\n    if qtile.currentWindow is not None:\n        i = qtile.groups.index(qtile.currentGroup)\n        qtile.currentWindow.togroup(qtile.groups[i - 1].name)\n\n\ndef window_to_next_group(qtile):\n    if qtile.currentWindow is not None:\n        i = qtile.groups.index(qtile.currentGroup)\n        qtile.currentWindow.togroup(qtile.groups[i + 1].name)\n\n\n# Run \"xprop\" to see the wm class and name of an X client.\ngroups = [Group(\"1\", label=\"\uf269\", layout='max', matches=[Match(wm_class=[\"firefox\"])]),\n          Group(\"2\", label=\"\uf1cb\", layout='monadtall', matches=[Match(wm_class=[\"jetbrains-pycharm-ce-debug\"])]),\n          Group(\"3\", label=\"\uf109\", layout='monadtall'),\n          Group(\"4\", label=\"\uf17c\", layout='monadtall'),\n          Group(\"5\", label=\"\uf1fb\", layout='monadtall'),\n          Group(\"6\", label=\"\uf0c3\", layout='monadtall'),\n          Group(\"7\", label=\"\uf07c\", layout='monadtall'),\n          Group(\"8\", label=\"\uf03e\", layout='floating')]\n\n# Switch Groups\nfor i in groups:\n    keys.extend([\n        # Switch to group (mod + number of group)\n        Key([mod], i.name, lazy.group[i.name].toscreen()),\n\n        # Next group, Previous group\n        Key([mod], \"n\", lazy.screen.next_group()),\n        Key([mod], \"p\", lazy.screen.prev_group()),\n\n        # Switch to & Move focused window to group (mod + shift + number of group)\n        Key([mod, \"shift\"], i.name, lazy.window.togroup(i.name, switch_group=True)),\n\n        # Move focused window to group (mod + shift + letter of group)\n        # Key([mod, \"shift\"], i.name, lazy.window\".format(i.name)),w.togroup(i.name),\n        #   desc=\"move focused window to group {}\".format(i.name)),\n    ])\n\n\n# ================================= LAYOUTS =================================  #\nlayout_theme = {'border_width': 3,\n                'margin': 11,\n                'border_focus': '#86ACE0',\n                'border_normal': '#305673',\n                'single_border_width': 0}\n\nlayouts = [\n    layout.Max(),\n    layout.MonadTall(**layout_theme),\n    layout.Floating(layout_theme, border_width=0)\n    # layout.Bsp(),\n    # layout.Stack(num_stacks=2),\n    # layout.Columns(),layout_theme\n    # layout.Matrix(),\n    # layout.MonadWide(),\n    # layout.RatioTile(),\n    # layout.Tile(),\n    # layout.TreeTab(),\n    # layout.VerticalTile(),\n    # layout.Zoomy(),\n]\n\n\n# ================================= WIDGETS =================================  #\nwidget_defaults = dict(\n                background='#21242B',\n                foreground='#dfdfdf',\n                font='Source Code Pro',\n                fontsize=15,\n                margin=7,\n                padding=3)\n\nextension_defaults = widget_defaults.copy()\n\n\nmb_temp = open('/sys/devices/platform/it87.2608/hwmon/hwmon2/temp1_input', 'r')\n\ngpu_temp = subprocess.getoutput('nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits')\n\n\n\nnotf = subprocess.getoutput('~/.config/qtile/scripts/notifications.sh')\n\n\nscreens = [\n    Screen(\n        top=bar.Bar(\n            [\n                widget.Image(filename='~/Pictures/GoVi-Theme/GoVi_gtk/GoVi_gtk-Icons/apps/64/archlinux.png',\n                             margin=0,\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('ulauncher')}),\n\n                widget.CurrentLayoutIcon(scale=0.7),\n\n                widget.GroupBox(font='FontAw4esome',\n                                disable_drag=True,\n                                highlight_method='text',\n                                this_current_screen_border='#86ACE0',\n                                borderwidth=0,\n                                active='#DFDFDF',\n                                inactive='#717171'),\n\n                widget.Prompt(),\n\n                widget.TaskList(borderwidth=2, border='#5C718E', fontsize=14, max_title_width=300),\n\n                # ============================================================================================================ #\n\n                widget.Systray(padding=10),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/preferences/32/preferences-desktop-sound.svg',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('pavucontrol')}),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/nvidia3.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('nvidia-settings')}),\n\n                widget.Clock(fontsize=18),\n\n            ],\n            34),\n\n        bottom=bar.Bar(\n            [\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/power.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('kill -9 -1')}),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='2'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h / --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='H'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /home --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Datos:'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /Datos --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Media:'),\n                widget.GenPollText(\n                    func=lambda: subprocess.getoutput('df -h /Media --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                    update_interval=1),\n\n                widget.Spacer(length=20),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: notf,\n                    update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/email.sh'),\n                    update_interval=180),\n\n\n                widget.Spacer(length=bar.STRETCH),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_down.png'),\n                widget.Net(format='{down}/s', interface='enp3s0'),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_up.png'),\n                widget.Net(format='{up}/s ', interface='enp3s0'),\n\n                widget.ThermalSensor(tag_sensor='Package id 0', foreground='#287BDE'),\n\n                widget.GenPollText(func=gpu_temp, update_interval=1, foreground='#27AE60'),\n\n                widget.GenPollText(func=mb_temp, update_interval=1, foreground='#F6FA93'),\n\n                widget.Volume(update_interval=0.2, emoji=True),\n                widget.Volume(update_interval=0.2),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/calendar.png'),\n                widget.Clock(format='%a %d/%m/%Y '),\n            ],\n            34,),\n\n    ),\n]\n\n\n# ================================= FLOATING LAYOUTS =================================  #\nmouse = [\n    Drag([mod], 'Button1', lazy.window.set_position_floating(),\n         start=lazy.window.get_position()),\n    Drag([mod], 'Button3', lazy.window.set_size_floating(),\n         start=lazy.window.get_size()),\n    Click([mod], 'Button2', lazy.window.bring_to_front())\n]\n\ndgroups_key_binder = None\ndgroups_app_rules = []  # type: List\nmain = None  # WARNING: this is deprecated and will be removed soon\nfollow_mouse_focus = True\nbring_front_click = True\ncursor_warp = False\n\nfloating_layout = layout.Floating(float_rules=[\n    # Run the utility of `xprop` to see the wm class and name of an X client.\n    {'wmclass': 'confirm'},\n    {'wmclass': 'dialog'},\n    {'wmclass': 'download'},\n    {'wmclass': 'error'},\n    {'wmclass': 'file_progress'},\n    {'wmclass': 'notification'},\n    {'wmclass': 'splash'},\n    {'wmclass': 'toolbar'},\n    {'wmclass': 'confirmreset'},  # gitk\n    {'wmclass': 'makebranch'},  # gitk\n    {'wmclass': 'maketag'},  # gitk\n    {'wname': 'branchdialog'},  # gitk\n    {'wname': 'pinentry'},  # GPG key password entry\n    {'wmclass': 'ssh-askpass'},  # ssh-askpass\n    {'wmclass': 'ulauncher'},\n    {'wmclass': 'onboard'}\n])\n\n\nauto_fullscreen = True\nfocus_on_window_activation = \"focus\"\n\nwmname = \"LG3D\"\n\nautostart = [\n        \"killall nm-applet & sleep 1 && nm-applet --sm-disable &\",\n]\n\nfor x in autostart:\n    os.system(x)\n", "/home/govi", "widget.GenPollText", "widget.GenPollText(func=gpu_temp, update_interval=1, foreground=", "reground='", "widget.ThermalSensor(tag_sensor='Package id 0', foreground=", "notf = subprocess.getoutput('~/.config/qtile/scripts/notifications.sh')", "config", "cpu_temp = subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh')\n", "~/.config/qtile/scripts/cpu_temp.sh", "nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits", "c", "sys/devices/platform/it87.2608/hwmon/hwmon2/temp1_input', 'r'", "open('/sys/devices/platform/it87.2608/hwmon/hwmon2/temp1_input', 'r')", " > ~/.config/qtile/scripts/mb_temp", " > ~/.config/qtile/scripts/gpu_temp", " type", "~/.config/qtile/scripts/email.sh", "subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh')", "subprocess.getoutput('~/.config/qtile/scripts/gpu_temp.sh')", "gpu_temp", "mb_temp", "gpu", "'#287BDE'", "                                   update_interval=1, foreground='#287BDE'),\n", "                                   update_interval=1, foreground='#27AE60'),\n", "foreground", "                                   update_interval=1, foreground='#F6FA93'),\n", "subprocess.getoutput('~/.config/qtile/scripts/notifications.s", "sh", "\n\n\nscreens = [sh", "subprocess.getoutput('~/.config/qtile/scripts/notifications.')", "\n\nmb_temp = subprocess.getoutput('~/.config/qtile/scripts/mb_temp.sh')\n\ngpu_temp = subprocess.getoutput('~/.config/qtile/scripts/gpu_temp.sh')\n\ncpu_temp = subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh')\n\nnotf = ", "notf", "echo", "TextBox", "                widget.TextBox(font='GoVi_Icons', text='H'),\n", "widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/power.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('kill -9 -1')}),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='2'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h / --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='H'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /home --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Datos:'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /Datos --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Media:'),\n                widget.GenPollText(\n                    func=lambda: subprocess.getoutput('df -h /Media --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                    update_interval=1),\n\n                widget.Spacer(length=20),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/notifications.sh'),\n                    update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/email.sh'),\n                    update_interval=180),\n\n\n                widget.Spacer(length=bar.STRETCH),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_down.png'),\n                widget.Net(format='{down}/s', interface='enp3s0'),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_up.png'),\n                widget.Net(format='{up}/s ', interface='enp3s0'),\n\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh'),\n                   update_interval=1, foreground='#287BDE'),\n\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/gpu_temp.sh'),\n                   update_interval=1, foreground='#27AE60'),\n\n\n\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/mb_temp.sh'),\n                   update_interval=1, foreground='#F6FA93'),\n\n                widget.Volume(update_interval=0.2, emoji=True),\n                widget.Volume(update_interval=0.2),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/calendar.png'),\n                widget.Clock(format='%a %d/%m/%Y '),", "H", "                widget.TextBox(font='GoVi_Icons', text='3'),\n", "widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/power.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('kill -9 -1')}),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='2'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h / --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='H'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /home --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Datos:'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /Datos --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Media:'),\n                widget.GenPollText(\n                    func=lambda: subprocess.getoutput('df -h /Media --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                    update_interval=1),\n\n                widget.Spacer(length=20),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/notifications.sh'),\n                    update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/email.sh'),\n                    update_interval=180),\n\n\n                widget.Spacer(length=bar.STRETCH),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_down.png'),\n                widget.Net(format='{down}/s', interface='enp3s0'),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_up.png'),\n                widget.Net(format='{up}/s ', interface='enp3s0'),\n\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh'),\n                   update_interval=1, foreground='#287BDE'),\n\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/gpu_temp.sh'),\n                   update_interval=1, foreground='#27AE60'),\n\n                widget.TextBox(font='GoVi_Icons', text='3'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/mb_temp.sh'),\n                   update_interval=1, foreground='#F6FA93'),\n\n                widget.Volume(update_interval=0.2, emoji=True),\n                widget.Volume(update_interval=0.2),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/calendar.png'),\n                widget.Clock(format='%a %d/%m/%Y '),", "widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/power.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('kill -9 -1')}),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='2'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h / --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='H'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /home --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Datos:'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /Datos --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Media:'),\n                widget.GenPollText(\n                    func=lambda: subprocess.getoutput('df -h /Media --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                    update_interval=1),\n\n                widget.Spacer(length=20),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/notifications.sh'),\n                    update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/email.sh'),\n                    update_interval=180),\n\n\n                widget.Spacer(length=bar.STRETCH),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_down.png'),\n                widget.Net(format='{down}/s', interface='enp3s0'),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_up.png'),\n                widget.Net(format='{up}/s ', interface='enp3s0'),\n\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh'),\n                   update_interval=1, foreground='#287BDE'),\n                \n                widget.TextBox(font='GoVi_Icons', text='3'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/gpu_temp.sh'),\n                   update_interval=1, foreground='#27AE60'),\n\n                widget.TextBox(font='GoVi_Icons', text='3'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/mb_temp.sh'),\n                   update_interval=1, foreground='#F6FA93'),\n\n                widget.Volume(update_interval=0.2, emoji=True),\n                widget.Volume(update_interval=0.2),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/calendar.png'),\n                widget.Clock(format='%a %d/%m/%Y '),", "font='GoVi_Icons'", "GoVi_Icons", "                widget.TextBox(font='GoVi_Icons', text='0'),\n", "font='GoVi_Icons',", "                    update_interval=1, foreground='#287BDE'),\n", "    update_interval=1, foreground='#287BDE'),\n", "font='GoVi_Icons', ", "    echo \"", " $temp\u00b0C \"", "\ud83d\udd25", "( ", " )", "cpu_temp", "                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_up.png'),\n", "widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/power.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('kill -9 -1')}),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='2'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h / --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='H'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /home --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Datos:'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /Datos --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Media:'),\n                widget.GenPollText(\n                    func=lambda: subprocess.getoutput('df -h /Media --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                    update_interval=1),\n\n                widget.Spacer(length=20),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/notifications.sh'),\n                    update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/email.sh'),\n                    update_interval=180),\n\n\n                widget.Spacer(length=bar.STRETCH),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_down.png'),\n                widget.Net(format='{down}/s', interface='enp3s0'),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_up.png'),\n                widget.Net(format='{up}/s ', interface='enp3s0'),\n\n\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh'),\n                    update_interval=1, foreground='#287BDE'),\n\n                widget.TextBox(font='GoVi_Icons', text='1'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/gpu_temp.sh'),\n                   update_interval=1, foreground='#27AE60'),\n\n                widget.TextBox(font='GoVi_Icons', text='3'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/mb_temp.sh'),\n                   update_interval=1, foreground='#F6FA93'),\n\n                widget.Volume(update_interval=0.2, emoji=True),\n                widget.Volume(update_interval=0.2),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/calendar.png'),\n                widget.Clock(format='%a %d/%m/%Y '),", "~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_up.png'", "icon", "Image", "filename", "text=", "lambda: subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh'", "cpu_temp < 55", "55", " str", "\u00b0C", "cpu_icon", "                widget.TextBox(cpu_icon),\n", "~/.config/polybar/scripts/notf_switch.sh", "mousecallbacks", "'Button1': ", "'~/.config/polybar/scripts/notf_switch.sh'", "'{Button1': subprocess.run('~/.config/polybar/scripts/notf_switch.sh')}", "subprocess.run('~/.config/polybar/scripts/notf_switch.sh')", "cpu_temp = subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh | cut -c1-2',)\ncpu_temp = int(cpu_temp)\n\ndef cpu_icon():\n    if cpu_temp < 55:\n        print(\"text='0'\", end='')\n    else:\n        print(\"text='\ud83d\udd25'\", end='')\n\n\ncpu_icon()", "polybar", "notf_switch", "subprocess.run('~/.config/polybar/scripts/notf_switch.sh')\n", "run", "subprocess.call('~/.config/qtile/scripts/notf_switch.sh', shell=True)", "subprocess.run('~/.config/qtile/scripts/notf_switch.sh')", " lambda:", "lambda:", "lambda: subprocess.call", "margin=7,", "7", "margin", "                                   margin=10,),\n", "    margin=10,),\n", "0", "margin=15", "10", ", margin=9", "sh ~/.config/qtile/scripts/notf_switch.sh", "./", "subprocess", "qtile", "sh ", "lambda subprocess: ", "'~/.config/qtile/scripts/notf_switch.sh'", ", shell=True)", "'", "]", "[", "~/.config/qtile/scripts/notf_switch.sh", "ate_interval=1),", "                    update_interval=1),\n", "\n              ", "font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/notifications.sh'),\n                                   \n                    mouse_callbacks={'Button1': subprocess.call('~/.config/qtile/scripts/notf_switch.sh')}", "                                   \n", "                                   update_interval=1),\n", "    update_interval=1),\n", "                mouse_callbacks={'Button1': subprocess.call('~/.config/qtile/scripts/notf_switch.sh')}),\n", "    mouse_callbacks={'Button1': subprocess.call('~/.config/qtile/scripts/notf_switch.sh')}),\n", "AttributeError", "call", "subprocess.run", ", shell=True", "os.system('~/.config/qtile/scripts/notf_switch.sh')", "shell", "subprocess.run('~/.config/qtile/scripts/notf_switch.sh', shell=True)\n", "# subprocess.run('~/.config/qtile/scripts/notf_switch.sh', shell=True)\n", "lambda: ", "qtile mouse_callbacks", "qtile.cmd_spawn", "lambda: os.system", "da qtile: ", "'Button1': lambda qtile: qtile.cmd_spawn", "{'Button1': qtile.cmd_spawn", "ba", "lambda qtile: ", "lambda qtile: qtile.cmd_spawn", "os.system", "                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/notf_switch.sh')}),\n", "# ================================= WIDGETS BOTTOM LEFT =================================  #\n                widget.Image(filename='~/.config/qtile/@resources/power.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('kill -9 -1')}),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='2'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h / --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='H'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /home --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Datos:'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /Datos --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Media:'),\n                widget.GenPollText(\n                    func=lambda: subprocess.getoutput('df -h /Media --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                    update_interval=1),\n\n                widget.Spacer(length=20),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/notifications.sh'),\n                    update_interval=1,\n                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/notf_switch.sh')}),\n\n                widget.Spacer(length=10),\n\n                widget.Image(filename='~/.config/qtile/@resources/gmail.svg', margin=8),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/email.sh'),\n                    update_interval=300),\n                \n\n                widget.Spacer(length=5),\n\n                widget.Image(filename='~/.config/qtile/@resources/youtube.svg'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_youtube_not.sh'),\n                    update_interval=300),\n\n                widget.Spacer(length=5),\n\n                widget.Image(filename='~/.config/qtile/@resources/gamepad.png'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_games_not.sh'),\n                    update_interval=300),\n\n                widget.Spacer(length=5),\n\n                widget.Image(filename='~/.config/qtile/@resources/github.svg', margin=9),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_github_not.sh'),\n                    update_interval=300),\n\n                widget.Spacer(length=5),\n\n                # ================================= WIDGETS BOTTOM RIGHT ================================= #\n                widget.Spacer(length=bar.STRETCH),\n\n                widget.Image(filename='~/.config/qtile/@resources/arrow_down.png'),\n                widget.Net(format='{down}/s', interface='enp3s0'),\n\n                widget.Image(filename='~/.config/qtile/@resources/arrow_up.png'),\n                widget.Net(format='{up}/s ', interface='enp3s0'),\n\n                # widget.TextBox(cpu_icon),\n                widget.TextBox(font='GoVi_Icons', text='0'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh'),\n                    update_interval=1, foreground='#287BDE'),\n\n                widget.TextBox(font='GoVi_Icons', text='1'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/gpu_temp.sh'),\n                   update_interval=1, foreground='#27AE60'),\n\n                widget.TextBox(font='GoVi_Icons', text='3'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/mb_temp.sh'),\n                   update_interval=1, foreground='#F6FA93'),\n\n                widget.Volume(update_interval=0.2, emoji=True),\n                widget.Volume(update_interval=0.2),\n\n                widget.Image(filename='~/.config/qtile/@resources/calendar.png'),\n                widget.Clock(format='%a %d/%m/%Y '),", "lambda", "    'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/notf_switch.sh')}),\n", "{", "                mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/notf_switch.sh')}),\n", " ", "firefox \"http://www.gmail.com\"", "sh -c ~/.config/qtile/scripts/notf_switch.sh", "# ================================= WIDGETS BOTTOM LEFT =================================  #\n                widget.Image(filename='~/.config/qtile/@resources/power.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('kill -9 -1')}),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='2'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h / --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='H'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /home --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Datos:'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /Datos --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Media:'),\n                widget.GenPollText(\n                    func=lambda: subprocess.getoutput('df -h /Media --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                    update_interval=1),\n\n                widget.Spacer(length=20),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/notifications.sh'),\n                    update_interval=1,\n                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/notf_switch.sh')}),\n\n                widget.Spacer(length=10),\n\n                widget.Image(filename='~/.config/qtile/@resources/gmail.svg', margin=8),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/email.sh'),\n                    update_interval=300,\n                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('firefox \"http://www.gmail.com\"')}),\n\n                widget.Spacer(length=5),\n\n                widget.Image(filename='~/.config/qtile/@resources/youtube.svg'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_youtube_not.sh'),\n                    update_interval=300),\n                \n\n                widget.Spacer(length=5),\n\n                widget.Image(filename='~/.config/qtile/@resources/gamepad.png'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_games_not.sh'),\n                    update_interval=300),\n\n                widget.Spacer(length=5),\n\n                widget.Image(filename='~/.config/qtile/@resources/github.svg', margin=9),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_github_not.sh'),\n                    update_interval=300),\n\n                widget.Spacer(length=5),\n\n                # ================================= WIDGETS BOTTOM RIGHT ================================= #\n                widget.Spacer(length=bar.STRETCH),\n\n                widget.Image(filename='~/.config/qtile/@resources/arrow_down.png'),\n                widget.Net(format='{down}/s', interface='enp3s0'),\n\n                widget.Image(filename='~/.config/qtile/@resources/arrow_up.png'),\n                widget.Net(format='{up}/s ', interface='enp3s0'),\n\n                # widget.TextBox(cpu_icon),\n                widget.TextBox(font='GoVi_Icons', text='0'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh'),\n                    update_interval=1, foreground='#287BDE'),\n\n                widget.TextBox(font='GoVi_Icons', text='1'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/gpu_temp.sh'),\n                   update_interval=1, foreground='#27AE60'),\n\n                widget.TextBox(font='GoVi_Icons', text='3'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/mb_temp.sh'),\n                   update_interval=1, foreground='#F6FA93'),\n\n                widget.Volume(update_interval=0.2, emoji=True),\n                widget.Volume(update_interval=0.2),\n\n                widget.Image(filename='~/.config/qtile/@resources/calendar.png'),\n                widget.Clock(format='%a %d/%m/%Y '),", "update_interval", "                    update_interval=300,\n", "                mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('firefox \"http://www.gmail.com\"')}),\n", "'sh -c ~/.config/qtile/scripts/notf_switch.sh'", "'firefox \"http://www.gmail.com\"'", "rss_youtube_Reset", "rss_youtube_Reset.sh", "notf_switch.sh", "                    mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/rss_youtube_Reset.sh')}),\n", "# ================================= WIDGETS BOTTOM LEFT =================================  #\n                widget.Image(filename='~/.config/qtile/@resources/power.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('kill -9 -1')}),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='2'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h / --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='H'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /home --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Datos:'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /Datos --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Media:'),\n                widget.GenPollText(\n                    func=lambda: subprocess.getoutput('df -h /Media --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                    update_interval=1),\n\n                widget.Spacer(length=20),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/notifications.sh'),\n                    update_interval=1,\n                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/notf_switch.sh')}),\n\n                widget.Spacer(length=10),\n\n                widget.Image(filename='~/.config/qtile/@resources/gmail.svg', margin=8),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/email.sh'),\n                    update_interval=300,\n                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('firefox \"http://www.gmail.com\"')}),\n\n                widget.Spacer(length=5),\n\n                widget.Image(filename='~/.config/qtile/@resources/youtube.svg'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_youtube_not.sh'),\n                    update_interval=300,\n                    mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/rss_youtube_Reset.sh')}),\n\n                widget.Spacer(length=5),\n\n                widget.Image(filename='~/.config/qtile/@resources/gamepad.png'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_games_not.sh'),\n                    update_interval=300),\n                \n\n                widget.Spacer(length=5),\n\n                widget.Image(filename='~/.config/qtile/@resources/github.svg', margin=9),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_github_not.sh'),\n                    update_interval=300),\n\n                widget.Spacer(length=5),\n\n                # ================================= WIDGETS BOTTOM RIGHT ================================= #\n                widget.Spacer(length=bar.STRETCH),\n\n                widget.Image(filename='~/.config/qtile/@resources/arrow_down.png'),\n                widget.Net(format='{down}/s', interface='enp3s0'),\n\n                widget.Image(filename='~/.config/qtile/@resources/arrow_up.png'),\n                widget.Net(format='{up}/s ', interface='enp3s0'),\n\n                # widget.TextBox(cpu_icon),\n                widget.TextBox(font='GoVi_Icons', text='0'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh'),\n                    update_interval=1, foreground='#287BDE'),\n\n                widget.TextBox(font='GoVi_Icons', text='1'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/gpu_temp.sh'),\n                   update_interval=1, foreground='#27AE60'),\n\n                widget.TextBox(font='GoVi_Icons', text='3'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/mb_temp.sh'),\n                   update_interval=1, foreground='#F6FA93'),\n\n                widget.Volume(update_interval=0.2, emoji=True),\n                widget.Volume(update_interval=0.2),\n\n                widget.Image(filename='~/.config/qtile/@resources/calendar.png'),\n                widget.Clock(format='%a %d/%m/%Y '),", "youtube", "Button1", "                    mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/rss_games_Reset.sh')}),\n", "widget.Image(filename='~/.config/qtile/@resources/youtube.svg", "widget.Image(filename='~/.config/qtile/@resources/calendar.png", "widget.Image(filename='~/.config/qtile/@resources/gamepad.png", "widget.Image(filename='~/.config/qtile/@resources/arrow_up.png", "widget.Image(filename='~/.config/qtile/@resources/power.png", "widget.Image(filename='~/.config/qtile/@resources/arrow_down.png", "widget.Image(filename='~/.config/qtile/@resources/github.svg", "widget.Image(filename='~/.config/qtile/@resources/gmail.svg", "# ================================= WIDGETS BOTTOM LEFT =================================  #\n                widget.Image(filename='~/.config/qtile/@resources/power.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('kill -9 -1')}),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='2'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h / --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(font='GoVi_Icons', text='H'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /home --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Datos:'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('df -h /Datos --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                                   update_interval=1),\n\n                widget.Spacer(length=10),\n\n                widget.TextBox(text='/Media:'),\n                widget.GenPollText(\n                    func=lambda: subprocess.getoutput('df -h /Media --o=avail | awk \"NR>1\" | tr -d \" \"'),\n                    update_interval=1),\n\n                widget.Spacer(length=20),\n\n                widget.GenPollText(font='Noto Color Emoji',\n                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/notifications.sh'),\n                    update_interval=1,\n                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/notf_switch.sh')}),\n\n                widget.Spacer(length=10),\n\n                widget.Image(filename='~/.config/qtile/@resources/gmail.svg', margin=8),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/email.sh'),\n                    update_interval=300,\n                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('firefox \"http://www.gmail.com\"')}),\n\n                widget.Spacer(length=5),\n\n                widget.Image(filename='~/.config/qtile/@resources/youtube.svg'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_youtube_not.sh'),\n                    update_interval=300,\n                    mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/rss_youtube_Reset.sh')}),\n\n                widget.Spacer(length=5),\n\n                widget.Image(filename='~/.config/qtile/@resources/gamepad.png'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_games_not.sh'),\n                    update_interval=300,\n                    mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/rss_games_Reset.sh')}),\n\n                widget.Spacer(length=5),\n\n                widget.Image(filename='~/.config/qtile/@resources/github.svg', margin=9),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/rss_github_not.sh'),\n                    update_interval=300),\n                \n\n                widget.Spacer(length=5),\n\n                # ================================= WIDGETS BOTTOM RIGHT ================================= #\n                widget.Spacer(length=bar.STRETCH),\n\n                widget.Image(filename='~/.config/qtile/@resources/arrow_down.png'),\n                widget.Net(format='{down}/s', interface='enp3s0'),\n\n                widget.Image(filename='~/.config/qtile/@resources/arrow_up.png'),\n                widget.Net(format='{up}/s ', interface='enp3s0'),\n\n                # widget.TextBox(cpu_icon),\n                widget.TextBox(font='GoVi_Icons', text='0'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh'),\n                    update_interval=1, foreground='#287BDE'),\n\n                widget.TextBox(font='GoVi_Icons', text='1'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/gpu_temp.sh'),\n                   update_interval=1, foreground='#27AE60'),\n\n                widget.TextBox(font='GoVi_Icons', text='3'),\n                widget.GenPollText(func=lambda: subprocess.getoutput('~/.config/qtile/scripts/mb_temp.sh'),\n                   update_interval=1, foreground='#F6FA93'),\n\n                widget.Volume(update_interval=0.2, emoji=True),\n                widget.Volume(update_interval=0.2),\n\n                widget.Image(filename='~/.config/qtile/@resources/calendar.png'),\n                widget.Clock(format='%a %d/%m/%Y '),", "                \n", "widget.Spacer(length=5),\n", "    widget.Spacer(length=5),\n", "300),", ")", "mouse_callbacks", "                mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/rss_games_Reset.sh')}),\n", " = ", "github", "games", "lazy.restart()", "t. lazy.restart() R", "lazy.restart ", " (", "rror))", "    Troubleshooting\n    Shell commands\n\n    Reference\n\n    Scripting\n    Commands API\n    Scripting Commands\n    Keybindings in images\n\n    Contributing\n    Hacking on Qtile\n\n    Frequently Asked Questions\n    License\n\n    Docs \u00bb Module code \u00bb libqtile.core.manager\n\nSource code for libqtile.core.manager\n\n# Copyright (c) 2008, Aldo Cortesi. All rights reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nimport asyncio\nimport io\nimport logging\nimport os\nimport pickle\nimport shlex\nimport signal\nimport subprocess\nimport tempfile\nimport time\nimport warnings\nfrom typing import Dict, List, Optional, Tuple\n\nimport xcffib\nimport xcffib.xinerama\nimport xcffib.xproto\n\nimport libqtile\nfrom libqtile import confreader, hook, ipc, utils, window\nfrom libqtile.backend.x11 import xcbq\nfrom libqtile.command import interface\nfrom libqtile.command.base import CommandError, CommandException, CommandObject\nfrom libqtile.command.client import InteractiveCommandClient\nfrom libqtile.command.interface import IPCCommandServer, QtileCommandInterface\nfrom libqtile.config import Click, Drag, Key, KeyChord, Match, Rule\nfrom libqtile.config import ScratchPad as ScratchPadConfig\nfrom libqtile.config import Screen\nfrom libqtile.core.lifecycle import lifecycle\nfrom libqtile.core.loop import LoopContext\nfrom libqtile.core.state import QtileState\nfrom libqtile.dgroups import DGroups\nfrom libqtile.extension.base import _Extension\nfrom libqtile.group import _Group\nfrom libqtile.lazy import lazy\nfrom libqtile.log_utils import logger\nfrom libqtile.scratchpad import ScratchPad\nfrom libqtile.utils import get_cache_dir, send_notification\nfrom libqtile.widget.base import _Widget\n\n\n[docs]\nclass Qtile(CommandObject):\n    \"\"\"This object is the `root` of the command graph\"\"\"\n    def __init__(\n        self,\n        kore,\n        config,\n        no_spawn=False,\n        state=None,\n        socket_path: Optional[str] = None,\n    ):\n        self.core = kore\n        self.no_spawn = no_spawn\n        self._state = state\n        self.socket_path = socket_path\n\n        self._drag: Optional[Drag] = None\n        self.mouse_map: Dict[int, List[Click]] = {}\n        self.mouse_position = (0, 0)\n\n        self.windows_map: Dict[int, window._Window] = {}\n        self.widgets_map: Dict[str, _Widget] = {}\n        self.groups_map: Dict[str, _Group] = {}\n        self.groups: List[_Group] = []\n        self.dgroups: Optional[DGroups] = None\n\n        self.keys_map: Dict[Tuple[int, int], Key] = {}\n        self.current_chord = False\n        self.numlock_mask, self.valid_mask = self.core.masks\n\n        self.current_screen: Optional[Screen] = None\n        self.screens: List[Screen] = []\n\n        libqtile.init(self)\n\n        self._eventloop: Optional[asyncio.AbstractEventLoop] = None\n        self._stopped_event: Optional[asyncio.Event] = None\n\n        self.server = IPCCommandServer(self)\n        self.config = config\n        self.load_config()\n\n    def load_config(self):\n        try:\n            self.config.load()\n            self.config.validate()\n        except Exception as e:\n            logger.exception('Error while reading config file (%s)', e)\n            self.config = confreader.Config()\n            from libqtile.widget import TextBox\n            widgets = self.config.screens[0].bottom.widgets\n            widgets.insert(0, TextBox('Config Err!'))\n\n        self.core.wmname = getattr(self.config, \"wmname\", \"qtile\")\n        if self.config.main:\n            warnings.warn(\"Defining a main function is deprecated, use libqtile.qtile\", DeprecationWarning)\n            self.config.main(self)\n\n        self.dgroups = DGroups(self, self.config.groups, self.config.dgroups_key_binder)\n\n        if self.config.widget_defaults:\n            _Widget.global_defaults = self.config.widget_defaults\n        if self.config.extension_defaults:\n            _Extension.global_defaults = self.config.extension_defaults\n\n        for installed_extension in _Extension.installed_extensions:\n            installed_extension._configure(self)\n\n        for i in self.groups:\n            self.groups_map[i.name] = i\n\n        for grp in self.config.groups:\n            if isinstance(grp, ScratchPadConfig):\n                sp = ScratchPad(grp.name, grp.dropdowns, grp.label)\n                sp._configure([self.config.floating_layout],\n                              self.config.floating_layout, self)\n                self.groups.append(sp)\n                self.groups_map[sp.name] = sp\n\n        # It fixes problems with focus when clicking windows of some specific clients like xterm\n        def noop(qtile):\n            pass\n        self.config.mouse += (Click([], \"Button1\", lazy.function(noop), focus=\"after\"),)\n\n    def dump_state(self, buf):\n        try:\n            pickle.dump(QtileState(self), buf, protocol=0)\n        except:  # noqa: E722\n            logger.exception('Unable to pickle qtile state')\n\n    def _configure(self):\n        \"\"\"\n        This is the part of init that needs to happen after the event loop is\n        fully set up. asyncio is required to listen and respond to backend\n        events.\n        \"\"\"\n        self._process_screens()\n        self.current_screen = self.screens[0]\n\n        self.conn.flush()\n        self.conn.xsync()\n        self.core._xpoll()\n\n        # Map and Grab keys\n        for key in self.config.keys:\n            self.grab_key(key)\n\n        for i in self.config.mouse:\n            if self.mouse_map.get(i.button_code) is None:\n                self.mouse_map[i.button_code] = []\n            self.mouse_map[i.button_code].append(i)\n\n        self.grab_mouse()\n\n        # no_spawn is set when we are restarting; we only want to run the\n        # startup hook once.\n        if not self.no_spawn:\n            hook.fire(\"startup_once\")\n        hook.fire(\"startup\")\n\n        if self._state:\n            try:\n                with open(self._state, 'rb') as f:\n                    st = pickle.load(f)\n                st.apply(self)\n            except:  # noqa: E722\n                logger.exception(\"failed restoring state\")\n            finally:\n                os.remove(self._state)\n\n        self.core.scan()\n        if self._state:\n            for screen in self.screens:\n                screen.group.layout_all()\n        self._state = None\n        self.update_net_desktops()\n        hook.subscribe.setgroup(self.update_net_desktops)\n\n        hook.fire(\"startup_complete\")\n\n    def _prepare_socket_path(\n        self,\n        socket_path: Optional[str] = None,\n    ) -> str:\n        if socket_path is None:\n            socket_path = ipc.find_sockfile(self.core.display_name)\n\n        if os.path.exists(socket_path):\n            os.unlink(socket_path)\n\n        return socket_path\n\n    @property\n    def root(self):\n        return self.core._root\n\n    @property\n    def conn(self):\n        return self.core.conn\n\n    @property\n    def selection(self):\n        return self.core._selection\n\n    def loop(self) -> None:\n        asyncio.run(self.async_loop())\n\n    async def async_loop(self) -> None:\n        \"\"\"Run the event loop\n\n        Finalizes the Qtile instance on exit.\n        \"\"\"\n        self._eventloop = asyncio.get_running_loop()\n        self._stopped_event = asyncio.Event()\n        self.core.setup_listener(self)\n        try:\n            async with LoopContext({\n                signal.SIGTERM: self.stop,\n                signal.SIGINT: self.stop,\n                signal.SIGHUP: self.restart,\n            }), ipc.Server(\n                self._prepare_socket_path(self.socket_path),\n                self.server.call,\n            ):\n                self._configure()\n                await self._stopped_event.wait()\n        finally:\n            self.finalize()\n            self.core.remove_listener()\n\n    def stop(self):\n        hook.fire(\"shutdown\")\n        lifecycle.behavior = lifecycle.behavior.TERMINATE\n        self.graceful_shutdown()\n        self._stop()\n\n    def restart(self):\n        hook.fire(\"restart\")\n        lifecycle.behavior = lifecycle.behavior.RESTART\n        state_file = os.path.join(tempfile.gettempdir(), 'qtile-state')\n        with open(state_file, 'wb') as f:\n            self.dump_state(f)\n        lifecycle.state_file = state_file\n        self._stop()\n\n    def _stop(self):\n        logger.debug('Stopping qtile')\n        if self._stopped_event is not None:\n            self._stopped_event.set()\n\n    def finalize(self):\n        try:\n            for widget in self.widgets_map.values():\n                widget.finalize()\n\n            for layout in self.config.layouts:\n                layout.finalize()\n\n            for screen in self.screens:\n                for bar in [screen.top, screen.bottom, screen.left, screen.right]:\n                    if bar is not None:\n                        bar.finalize()\n        except:  # noqa: E722\n            logger.exception('exception during finalize')\n        finally:\n            hook.clear()\n            self.core.finalize()\n\n    def _process_fake_screens(self):\n        \"\"\"\n        Since Xephyr and Xnest don't really support offset screens, we'll fake\n        it here for testing, (or if you want to partition a physical monitor\n        into separate screens)\n        \"\"\"\n        for i, s in enumerate(self.config.fake_screens):\n            # should have x,y, width and height set\n            s._configure(self, i, s.x, s.y, s.width, s.height, self.groups[i])\n            if not self.current_screen:\n                self.current_screen = s\n            self.screens.append(s)\n\n    def _process_screens(self) -> None:\n        if hasattr(self.config, 'fake_screens'):\n            self._process_fake_screens()\n            return\n\n        screen_info = self.core.get_screen_info()\n\n        for i, (x, y, w, h) in enumerate(screen_info):\n            if i + 1 > len(self.config.screens):\n                scr = Screen()\n            else:\n                scr = self.config.screens[i]\n\n            if not self.current_screen:\n                self.current_screen = scr\n\n            if len(self.groups) < i + 1:\n                name = f\"autogen_{i + 1}\"\n                self.add_group(name)\n                grp = self.groups[i]\n                logger.warning(f\"Too few groups in config. Added group: {name}\")\n            else:\n                grp = self.groups[i]\n\n            scr._configure(self, i, x, y, w, h, grp)\n            self.screens.append(scr)\n\n    def paint_screen(self, screen, image_path, mode=None):\n        self.core.painter.paint(screen, image_path, mode)\n\n    def process_key_event(self, keysym: int, mask: int) -> None:\n        key = self.keys_map.get((keysym, mask), None)\n        if key is None:\n            logger.info(\"Ignoring unknown keysym: {keysym}, mask: {mask}\".format(keysym=keysym, mask=mask))\n            return\n\n        if isinstance(key, KeyChord):\n            self.grab_chord(key)\n        else:\n            for cmd in key.commands:\n                if cmd.check(self):\n                    status, val = self.server.call(\n                        (cmd.selectors, cmd.name, cmd.args, cmd.kwargs)\n                    )\n                    if status in (interface.ERROR, interface.EXCEPTION):\n                        logger.error(\"KB command error %s: %s\" % (cmd.name, val))\n            else:\n                if self.current_chord is True or (self.current_chord and key.key == \"Escape\"):\n                    self.ungrab_chord()\n                return\n\n    def grab_keys(self) -> None:\n        \"\"\"Re-grab all of the keys configured in the key map\n\n        Useful when a keyboard mapping event is received.\n        \"\"\"\n        self.core.ungrab_keys()\n        for key in self.keys_map.values():\n            self.grab_key(key)\n\n    def grab_key(self, key: Key) -> None:\n        \"\"\"Grab the given key event\"\"\"\n        keysym, mask_key = self.core.grab_key(key)\n        self.keys_map[(keysym, mask_key)] = key\n\n    def ungrab_key(self, key: Key) -> None:\n        \"\"\"Ungrab a given key event\"\"\"\n        keysym, mask_key = self.core.ungrab_key(key)\n        self.keys_map.pop((keysym, mask_key))\n\n    def ungrab_keys(self) -> None:\n        \"\"\"Ungrab all key events\"\"\"\n        self.core.ungrab_keys()\n        self.keys_map.clear()\n\n    def grab_chord(self, chord) -> None:\n        self.current_chord = chord.mode if chord.mode != \"\" else True\n        if self.current_chord:\n            hook.fire(\"enter_chord\", self.current_chord)\n\n        self.ungrab_keys()\n        for key in chord.submapings:\n            self.grab_key(key)\n\n    def ungrab_chord(self) -> None:\n        self.current_chord = False\n        hook.fire(\"leave_chord\")\n\n        self.ungrab_keys()\n        for key in self.config.keys:\n            self.grab_key(key)\n\n    def grab_mouse(self) -> None:\n        self.core.ungrab_buttons()\n        for mouse in self.config.mouse:\n            self.core.grab_button(mouse)\n\n    def update_net_desktops(self) -> None:\n        try:\n            index = self.groups.index(self.current_group)\n        # TODO: we should really only except ValueError here, AttributeError is\n        # an annoying chicken and egg because we're accessing current_screen\n        # (via current_group), and when we set up the initial groups, there\n        # aren't any screens yet. This can probably be changed when #475 is\n        # fixed.\n        except (ValueError, AttributeError):\n            index = 0\n\n        self.core.update_net_desktops(self.groups, index)\n\n    def update_client_list(self) -> None:\n        \"\"\"Updates the client stack list\n\n        This is needed for third party tasklists and drag and drop of tabs in\n        chrome\n        \"\"\"\n        windows = [wid for wid, c in self.windows_map.items() if c.group]\n        self.core.update_client_list(windows)\n\n    def add_group(self, name, layout=None, layouts=None, label=None):\n        if name not in self.groups_map.keys():\n            g = _Group(name, layout, label=label)\n            self.groups.append(g)\n            if not layouts:\n                layouts = self.config.layouts\n            g._configure(layouts, self.config.floating_layout, self)\n            self.groups_map[name] = g\n            hook.fire(\"addgroup\", name)\n            hook.fire(\"changegroup\")\n            self.update_net_desktops()\n\n            return True\n        return False\n\n    def delete_group(self, name):\n        # one group per screen is needed\n        if len(self.groups) == len(self.screens):\n            raise ValueError(\"Can't delete all groups.\")\n        if name in self.groups_map.keys():\n            group = self.groups_map[name]\n            if group.screen and group.screen.previous_group:\n                target = group.screen.previous_group\n            else:\n                target = group.get_previous_group()\n\n            # Find a group that's not currently on a screen to bring to the\n            # front. This will terminate because of our check above.\n            while target.screen:\n                target = target.get_previous_group()\n            for i in list(group.windows):\n                i.togroup(target.name)\n            if self.current_group.name == name:\n                self.current_screen.set_group(target, save_prev=False)\n            self.groups.remove(group)\n            del(self.groups_map[name])\n            hook.fire(\"delgroup\", name)\n            hook.fire(\"changegroup\")\n            self.update_net_desktops()\n\n    def register_widget(self, w):\n        \"\"\"Register a bar widget\n\n        If a widget with the same name already exists, this will silently\n        ignore that widget. However, this is not necessarily a bug. By default\n        a widget's name is just ``self.__class__.lower()``, so putting multiple\n        widgets of the same class will alias and one will be inaccessible.\n        Since more than one groupbox widget is useful when you have more than\n        one screen, this is a not uncommon occurrence. If you want to use the\n        debug info for widgets with the same name, set the name yourself.\n        \"\"\"\n        if w.name:\n            if w.name in self.widgets_map:\n                return\n            self.widgets_map[w.name] = w\n\n    @property\n    def current_layout(self):\n        return self.current_group.layout\n\n    @property\n    def current_group(self):\n        return self.current_screen.group\n\n    @property\n    def current_window(self):\n        return self.current_screen.group.current_window\n\n    def add_strut(self, strut):\n        from libqtile.bar import Bar, Gap\n\n        for i, pos in enumerate([\"left\", \"right\", \"top\", \"bottom\"]):\n            if strut[i]:\n                bar = getattr(self.current_screen, pos)\n                if isinstance(bar, Bar):\n                    bar.adjust_for_strut(strut[i])\n                elif isinstance(bar, Gap):\n                    bar.size += strut[i]\n                    if bar.size <= 0:\n                        setattr(self.current_screen, pos, None)\n                else:\n                    setattr(self.current_screen, pos, Gap(strut[i]))\n\n        self.current_screen.resize()\n\n    def remove_strut(self, strut):\n        self.add_strut([-i for i in strut])\n\n    def map_window(self, window: xcbq.Window) -> None:\n        c = self.manage(window)\n        if c and (not c.group or not c.group.screen):\n            return\n        window.map()\n\n    def unmap_window(self, window_id) -> None:\n        c = self.windows_map.get(window_id)\n        if c and getattr(c, \"group\", None):\n            try:\n                c.window.unmap()\n                c.state = window.WithdrawnState\n            except xcffib.xproto.WindowError:\n                # This means that the window has probably been destroyed,\n                # but we haven't yet seen the DestroyNotify (it is likely\n                # next in the queue). So, we just let these errors pass\n                # since the window is dead.\n                pass\n        self.unmanage(window_id)\n\n    def manage(self, w):\n        try:\n            attrs = w.get_attributes()\n            internal = w.get_property(\"QTILE_INTERNAL\")\n        except (xcffib.xproto.WindowError, xcffib.xproto.AccessError):\n            return\n        if attrs and attrs.override_redirect:\n            return\n\n        if w.wid not in self.windows_map:\n            if internal:\n                try:\n                    c = window.Internal(w, self)\n                except (xcffib.xproto.WindowError, xcffib.xproto.AccessError):\n                    return\n                self.windows_map[w.wid] = c\n            else:\n                try:\n                    c = window.Window(w, self)\n                except (xcffib.xproto.WindowError, xcffib.xproto.AccessError):\n                    return\n\n                if w.get_wm_type() == \"dock\" or c.strut:\n                    c.cmd_static(self.current_screen.index)\n                    return\n\n                hook.fire(\"client_new\", c)\n\n                # Window may be defunct because\n                # it's been declared static in hook.\n                if c.defunct:\n                    return\n                self.windows_map[w.wid] = c\n                # Window may have been bound to a group in the hook.\n                if not c.group:\n                    self.current_screen.group.add(c, focus=c.can_steal_focus())\n                self.update_client_list()\n                hook.fire(\"client_managed\", c)\n            return c\n        else:\n            return self.windows_map[w.wid]\n\n    def unmanage(self, win):\n        c = self.windows_map.get(win)\n        if c:\n            hook.fire(\"client_killed\", c)\n            if c.strut:\n                self.remove_strut(c.strut)\n            if getattr(c, \"group\", None):\n                c.group.remove(c)\n            del self.windows_map[win]\n            self.update_client_list()\n        if self.current_window is None:\n            self.conn.fixup_focus()\n\n    def graceful_shutdown(self):\n        \"\"\"\n        Try and gracefully shutdown windows before exiting with SIGTERM, vs.\n        just closing the X session and having the X server send them all\n        SIGKILL.\n        \"\"\"\n\n        def get_interesting_pid(win):\n            # We don't need to kill Internal or Static windows, they're qtile\n            # managed and don't have any state.\n            if not isinstance(win, window.Window):\n                return None\n            try:\n                return win.window.get_net_wm_pid()\n            except Exception:\n                logger.exception(\"Got an exception in getting the window pid\")\n                return None\n        pids = map(get_interesting_pid, self.windows_map.values())\n        pids = list(filter(lambda x: x is not None, pids))\n\n        # Give the windows a chance to shut down nicely.\n        for pid in pids:\n            try:\n                os.kill(pid, signal.SIGTERM)\n            except OSError:\n                # might have died recently\n                pass\n\n        def still_alive(pid):\n            # most pids will not be children, so we can't use wait()\n            try:\n                os.kill(pid, 0)\n                return True\n            except OSError:\n                return False\n\n        # give everyone a little time to exit and write their state. but don't\n        # sleep forever (1s).\n        for i in range(10):\n            pids = list(filter(still_alive, pids))\n            if len(pids) == 0:\n                break\n            time.sleep(0.1)\n\n    def find_screen(self, x, y):\n        \"\"\"Find a screen based on the x and y offset\"\"\"\n        result = []\n        for i in self.screens:\n            if i.x <= x <= i.x + i.width and \\\n                    i.y <= y <= i.y + i.height:\n                result.append(i)\n        if len(result) == 1:\n            return result[0]\n        return None\n\n    def find_closest_screen(self, x, y):\n        \"\"\"\n        If find_screen returns None, then this basically extends a\n        screen vertically and horizontally and see if x,y lies in the\n        band.\n\n        Only works if it can find a SINGLE closest screen, else we\n        revert to _find_closest_closest.\n\n        Useful when dragging a window out of a screen onto another but\n        having leftmost corner above viewport.\n        \"\"\"\n        normal = self.find_screen(x, y)\n        if normal is not None:\n            return normal\n        x_match = []\n        y_match = []\n        for i in self.screens:\n            if i.x <= x <= i.x + i.width:\n                x_match.append(i)\n            if i.y <= y <= i.y + i.height:\n                y_match.append(i)\n        if len(x_match) == 1:\n            return x_match[0]\n        if len(y_match) == 1:\n            return y_match[0]\n        return self._find_closest_closest(x, y, x_match + y_match)\n\n    def _find_closest_closest(self, x, y, candidate_screens):\n        \"\"\"\n        if find_closest_screen can't determine one, we've got multiple\n        screens, so figure out who is closer.  We'll calculate using\n        the square of the distance from the center of a screen.\n\n        Note that this could return None if x, y is right/below all\n        screens (shouldn't happen but we don't do anything about it\n        here other than returning None)\n        \"\"\"\n        closest_distance = None\n        closest_screen = None\n        if not candidate_screens:\n            # try all screens\n            candidate_screens = self.screens\n        # if left corner is below and right of screen\n        # it can't really be a candidate\n        candidate_screens = [\n            s for s in candidate_screens\n            if x < s.x + s.width and y < s.y + s.height\n        ]\n        for s in candidate_screens:\n            middle_x = s.x + s.width / 2\n            middle_y = s.y + s.height / 2\n            distance = (x - middle_x) ** 2 + (y - middle_y) ** 2\n            if closest_distance is None or distance < closest_distance:\n                closest_distance = distance\n                closest_screen = s\n        return closest_screen\n\n    def _focus_by_click(self, e):\n        \"\"\"Bring a window to the front\n\n        Parameters\n        ==========\n        e : xcb event\n            Click event used to determine window to focus\n        \"\"\"\n        if e.child:\n            wid = e.child\n            window = self.windows_map.get(wid)\n\n            if self.config.bring_front_click and (\n                self.config.bring_front_click != \"floating_only\" or getattr(window, \"floating\", False)\n            ):\n                self.conn.conn.core.ConfigureWindow(\n                    wid, xcffib.xproto.ConfigWindow.StackMode, [xcffib.xproto.StackMode.Above]\n                )\n\n            try:\n                if window.group.screen is not self.current_screen:\n                    self.focus_screen(window.group.screen.index, warp=False)\n                self.current_group.focus(window, False)\n                window.focus(False)\n            except AttributeError:\n                # probably clicked an internal window\n                screen = self.find_screen(e.root_x, e.root_y)\n                if screen:\n                    self.focus_screen(screen.index, warp=False)\n\n        else:\n            # clicked on root window\n            screen = self.find_screen(e.root_x, e.root_y)\n            if screen:\n                self.focus_screen(screen.index, warp=False)\n\n        self.conn.conn.core.AllowEvents(xcffib.xproto.Allow.ReplayPointer, e.time)\n        self.conn.conn.flush()\n\n    def process_button_click(self, button_code, state, x, y, event) -> None:\n        self.mouse_position = (x, y)\n        for m in self.mouse_map.get(button_code, []):\n            try:\n                modmask = xcbq.translate_masks(m.modifiers)\n            except xcbq.XCBQError as e:\n                raise utils.QtileError(e)\n            if not m or modmask & self.valid_mask != state & self.valid_mask:\n                logger.info(\"Ignoring unknown button: %s\" % button_code)\n                continue\n            if isinstance(m, Click):\n                for i in m.commands:\n                    if i.check(self):\n                        if m.focus == \"before\":\n                            self._focus_by_click(event)\n                        status, val = self.server.call(\n                            (i.selectors, i.name, i.args, i.kwargs))\n                        if m.focus == \"after\":\n                            self._focus_by_click(event)\n                        if status in (interface.ERROR, interface.EXCEPTION):\n                            logger.error(\n                                \"Mouse command error %s: %s\" % (i.name, val)\n                            )\n            elif isinstance(m, Drag):\n                if m.start:\n                    i = m.start\n                    if m.focus == \"before\":\n                        self._focus_by_click(event)\n                    status, val = self.server.call(\n                        (i.selectors, i.name, i.args, i.kwargs))\n                    if status in (interface.ERROR, interface.EXCEPTION):\n                        logger.error(\n                            \"Mouse command error %s: %s\" % (i.name, val)\n                        )\n                        continue\n                else:\n                    val = (0, 0)\n                if m.focus == \"after\":\n                    self._focus_by_click(event)\n                self._drag = (x, y, val[0], val[1], m.commands)\n                self.core.grab_pointer()\n\n    def process_button_release(self, button_code):\n        k = self.mouse_map.get(button_code)\n        for m in k:\n            if not m:\n                logger.info(\n                    \"Ignoring unknown button release: %s\" % button_code\n                )\n                continue\n            if isinstance(m, Drag):\n                self._drag = None\n                self.core.ungrab_pointer()\n\n    def process_button_motion(self, x, y):\n        self.mouse_position = (x, y)\n\n        if self._drag is None:\n            return\n        ox, oy, rx, ry, cmd = self._drag\n        dx = x - ox\n        dy = y - oy\n        if dx or dy:\n            for i in cmd:\n                if i.check(self):\n                    status, val = self.server.call((\n                        i.selectors,\n                        i.name,\n                        i.args + (rx + dx, ry + dy),\n                        i.kwargs\n                    ))\n                    if status in (interface.ERROR, interface.EXCEPTION):\n                        logger.error(\n                            \"Mouse command error %s: %s\" % (i.name, val)\n                        )\n\n    def warp_to_screen(self):\n        if self.current_screen:\n            scr = self.current_screen\n            self.root.warp_pointer(scr.x + scr.dwidth // 2, scr.y + scr.dheight // 2)\n            self.root.set_input_focus()\n            self.root.set_property(\"_NET_ACTIVE_WINDOW\", self.root.wid)\n\n    def focus_screen(self, n, warp=True):\n        \"\"\"Have Qtile move to screen and put focus there\"\"\"\n        if n >= len(self.screens):\n            return\n        old = self.current_screen\n        self.current_screen = self.screens[n]\n        if old != self.current_screen:\n            hook.fire(\"current_screen_change\")\n            hook.fire(\"setgroup\")\n            old.group.layout_all()\n            self.current_group.focus(self.current_window, warp)\n            if self.current_window is None and warp:\n                self.warp_to_screen()\n\n    def move_to_group(self, group):\n        \"\"\"Create a group if it doesn't exist and move\n        the current window there\"\"\"\n        if self.current_window and group:\n            self.add_group(group)\n            self.current_window.togroup(group)\n\n    def _items(self, name):\n        if name == \"group\":\n            return True, list(self.groups_map.keys())\n        elif name == \"layout\":\n            return True, list(range(len(self.current_group.layouts)))\n        elif name == \"widget\":\n            return False, list(self.widgets_map.keys())\n        elif name == \"bar\":\n            return False, [x.position for x in self.current_screen.gaps]\n        elif name == \"window\":\n            return True, self.list_wids()\n        elif name == \"screen\":\n            return True, list(range(len(self.screens)))\n\n    def _select(self, name, sel):\n        if name == \"group\":\n            if sel is None:\n                return self.current_group\n            else:\n                return self.groups_map.get(sel)\n        elif name == \"layout\":\n            if sel is None:\n                return self.current_group.layout\n            else:\n                return utils.lget(self.current_group.layouts, sel)\n        elif name == \"widget\":\n            return self.widgets_map.get(sel)\n        elif name == \"bar\":\n            return getattr(self.current_screen, sel)\n        elif name == \"window\":\n            if sel is None:\n                return self.current_window\n            else:\n                return self.client_from_wid(sel)\n        elif name == \"screen\":\n            if sel is None:\n                return self.current_screen\n            else:\n                return utils.lget(self.screens, sel)\n\n    def list_wids(self):\n        return [i.window.wid for i in self.windows_map.values()]\n\n    def client_from_wid(self, wid):\n        for i in self.windows_map.values():\n            if i.window.wid == wid:\n                return i\n        return None\n\n    def call_soon(self, func, *args):\n        \"\"\" A wrapper for the event loop's call_soon which also flushes the X\n        event queue to the server after func is called. \"\"\"\n        def f():\n            func(*args)\n            self.conn.flush()\n        return self._eventloop.call_soon(f)\n\n    def call_soon_threadsafe(self, func, *args):\n        \"\"\" Another event loop proxy, see `call_soon`. \"\"\"\n        def f():\n            func(*args)\n            self.conn.flush()\n        return self._eventloop.call_soon_threadsafe(f)\n\n    def call_later(self, delay, func, *args):\n        \"\"\" Another event loop proxy, see `call_soon`. \"\"\"\n        def f():\n            func(*args)\n            self.conn.flush()\n        return self._eventloop.call_later(delay, f)\n\n    def run_in_executor(self, func, *args):\n        \"\"\" A wrapper for running a function in the event loop's default\n        executor. \"\"\"\n        return self._eventloop.run_in_executor(None, func, *args)\n\n[docs]\n    def cmd_debug(self):\n        \"\"\"Set log level to DEBUG\"\"\"\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Switching to DEBUG threshold')\n\n\n[docs]\n    def cmd_info(self):\n        \"\"\"Set log level to INFO\"\"\"\n        logger.setLevel(logging.INFO)\n        logger.info('Switching to INFO threshold')\n\n\n[docs]\n    def cmd_warning(self):\n        \"\"\"Set log level to WARNING\"\"\"\n        logger.setLevel(logging.WARNING)\n        logger.warning('Switching to WARNING threshold')\n\n\n[docs]\n    def cmd_error(self):\n        \"\"\"Set log level to ERROR\"\"\"\n        logger.setLevel(logging.ERROR)\n        logger.error('Switching to ERROR threshold')\n\n\n[docs]\n    def cmd_critical(self):\n        \"\"\"Set log level to CRITICAL\"\"\"\n        logger.setLevel(logging.CRITICAL)\n        logger.critical('Switching to CRITICAL threshold')\n\n\n[docs]\n    def cmd_loglevel(self):\n        return logger.level\n\n\n[docs]\n    def cmd_loglevelname(self):\n        return logging.getLevelName(logger.level)\n\n\n[docs]\n    def cmd_pause(self):\n        \"\"\"Drops into pdb\"\"\"\n        import pdb\n        pdb.set_trace()\n\n\n[docs]\n    def cmd_groups(self):\n        \"\"\"Return a dictionary containing information for all groups\n\n        Examples\n        ========\n\n            groups()\n        \"\"\"\n        return {i.name: i.info() for i in self.groups}\n\n\n    def get_mouse_position(self):\n        return self.mouse_position\n\n[docs]\n    def cmd_display_kb(self, *args):\n        \"\"\"Display table of key bindings\"\"\"\n        class FormatTable:\n            def __init__(self):\n                self.max_col_size = []\n                self.rows = []\n\n            def add(self, row):\n                n = len(row) - len(self.max_col_size)\n                if n > 0:\n                    self.max_col_size += [0] * n\n                for i, f in enumerate(row):\n                    if len(f) > self.max_col_size[i]:\n                        self.max_col_size[i] = len(f)\n                self.rows.append(row)\n\n            def getformat(self):\n                format_string = \" \".join(\"%-{0:d}s\".format(max_col_size + 2) for max_col_size in self.max_col_size)\n                return format_string + \"\\n\", len(self.max_col_size)\n\n            def expandlist(self, list, n):\n                if not list:\n                    return [\"-\" * max_col_size for max_col_size in self.max_col_size]\n                n -= len(list)\n                if n > 0:\n                    list += [\"\"] * n\n                return list\n\n            def __str__(self):\n                format, n = self.getformat()\n                return \"\".join([format % tuple(self.expandlist(row, n)) for row in self.rows])\n\n        result = FormatTable()\n        result.add([\"KeySym\", \"Mod\", \"Command\", \"Desc\"])\n        result.add([])\n        rows = []\n        for (ks, kmm), k in self.keys_map.items():\n            if not k.commands:\n                continue\n            name = \", \".join(xcbq.rkeysyms.get(ks, (\"<unknown>\", )))\n            modifiers = \", \".join(xcbq.translate_modifiers(kmm))\n            allargs = \", \".join(\n                [repr(value) for value in k.commands[0].args] +\n                [\"%s = %s\" % (keyword, repr(value)) for keyword, value in k.commands[0].kwargs.items()]\n            )\n            rows.append((name, str(modifiers), \"{0:s}({1:s})\".format(k.commands[0].name, allargs), k.desc))\n        rows.sort()\n        for row in rows:\n            result.add(row)\n        return str(result)\n\n\n[docs]\n    def cmd_list_widgets(self):\n        \"\"\"List of all addressible widget names\"\"\"\n        return list(self.widgets_map.keys())\n\n\n[docs]\n    def cmd_to_layout_index(self, index, group=None):\n        \"\"\"Switch to the layout with the given index in self.layouts.\n\n        Parameters\n        ==========\n        index :\n            Index of the layout in the list of layouts.\n        group :\n            Group name. If not specified, the current group is assumed.\n        \"\"\"\n        if group:\n            group = self.groups_map.get(group)\n        else:\n            group = self.current_group\n        group.use_layout(index)\n\n\n[docs]\n    def cmd_next_layout(self, group=None):\n        \"\"\"Switch to the next layout.\n\n        Parameters\n        ==========\n        group :\n            Group name. If not specified, the current group is assumed\n        \"\"\"\n        if group:\n            group = self.groups_map.get(group)\n        else:\n            group = self.current_group\n        group.use_next_layout()\n\n\n[docs]\n    def cmd_prev_layout(self, group=None):\n        \"\"\"Switch to the previous layout.\n\n        Parameters\n        ==========\n        group :\n            Group name. If not specified, the current group is assumed\n        \"\"\"\n        if group:\n            group = self.groups_map.get(group)\n        else:\n            group = self.current_group\n        group.use_previous_layout()\n\n\n[docs]\n    def cmd_screens(self):\n        \"\"\"Return a list of dictionaries providing information on all screens\"\"\"\n        lst = [dict(\n            index=i.index,\n            group=i.group.name if i.group is not None else None,\n            x=i.x,\n            y=i.y,\n            width=i.width,\n            height=i.height,\n            gaps=dict(\n                top=i.top.geometry() if i.top else None,\n                bottom=i.bottom.geometry() if i.bottom else None,\n                left=i.left.geometry() if i.left else None,\n                right=i.right.geometry() if i.right else None,\n            )\n        ) for i in self.screens]\n        return lst\n\n\n[docs]\n    def cmd_simulate_keypress(self, modifiers, key):\n        \"\"\"Simulates a keypress on the focused window.\n\n        Parameters\n        ==========\n        modifiers :\n            A list of modifier specification strings. Modifiers can be one of\n            \"shift\", \"lock\", \"control\" and \"mod1\" - \"mod5\".\n        key :\n            Key specification.\n\n        Examples\n        ========\n            simulate_keypress([\"control\", \"mod2\"], \"k\")\n        \"\"\"\n        # FIXME: This needs to be done with sendevent, once we have that fixed.\n        try:\n            modmasks = xcbq.translate_masks(modifiers)\n            keysym = xcbq.keysyms.get(key)\n        except xcbq.XCBQError as e:\n            raise CommandError(str(e))\n\n        class DummyEv:\n            pass\n\n        d = DummyEv()\n        d.detail = self.conn.keysym_to_keycode(keysym)[0]\n        d.state = modmasks\n        self.core.handle_KeyPress(d)\n\n\n[docs]\n    def cmd_validate_config(self):\n        try:\n            self.config.load()\n        except Exception as error:\n            send_notification(\"Configuration check\", str(error.__context__))\n        else:\n            send_notification(\"Configuration check\", \"No error found!\")\n\n\n[docs]\n    def cmd_restart(self):\n        \"\"\"Restart qtile\"\"\"\n        try:\n            self.config.load()\n        except Exception as error:\n            logger.error(\"Preventing restar", "cmd_restart", "padding=3", ", margin=8),", ",", "cmd_spawn", "http://www.gmail.com", "                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('firefox \"http://www.gmail.com\"')}),\n", "        ", "5", "                widget.Spacer(length=5),\n", "3", "                widget.Spacer(length=2),\n", "length", "                widget.Spacer(length=3),\n", "&", "polybar.sh &\n", "#!/bin/sh\n\nuserresources=$HOME/.Xresources\nusermodmap=$HOME/.Xmodmap\nsysresources=/etc/X11/xinit/.Xresources\nsysmodmap=/etc/X11/xinit/.Xmodmap\n\n# merge in defaults and keymaps\n\nif [ -f $sysresources ]; then\n    xrdb -merge $sysresources\nfi\n\nif [ -f $sysmodmap ]; then\n    xmodmap $sysmodmap\nfi\n\nif [ -f \"$userresources\" ]; then\n  xrdb -merge \"$userresources\"\nfi\n\nif [ -f \"$usermodmap\" ]; then\n    xmodmap \"$usermodmap\"\nfi\n\n# start some nice programs\n\nif [ -d /etc/X11/xinit/xinitrc.d ] ; then\n for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do\n  [ -x \"$f\" ] && . \"$f\"\n done\n unset f\nfi\n\n# twm &\n# xclock -geometry 50x50-1+1 &\n# xterm -geometry 80x50+494+51 &\n# xterm -geometry 80x20+494-0 &\n# exec xterm -geometry 80x66+0+0 -name login\n\n# Autostart\nexport PATH=$PATH:$HOME/Scripts/Shell/Autostart/\n\nnvidia_led.sh &\n\nnvidia-settings --load-config-only &\n\npicom -cCGb &\n\nsetxkbmap -layout es &\n\nset_background.sh &\n\n\nfirewall-applet &\n\n#nm-applet --sm-disable &\n\ncairo-dock &\n\neasystroke &\n\nimwheel.sh &\n\nexec qtile\n", "\n"], "CLIPBOARD": ["/home/govi/Programs/Adobe/Wine/Photoshop\n", "/home/govi/monitor-7877yyjjg.png\n/home/govi/network-7665ghik.png\n", "/home/govi/.bash_profile\n/home/govi/.bashrc\n", " '/home/govi/.imwheelrc'", "Sci Fi Wallpapers-", "/home/govi/Downloads/Sci Fi Wallpapers-766tty.jpg\n/home/govi/Downloads/Sci Fi Wallpapers-rQeu4f.jpg\n", "/home/govi/Programs/Adobe/Wine/Launch-Photoshop.sh\n", "ulauncher --hide-window", "~/Scripts/Shell/Utils/ulauncher.sh", "[Desktop Entry]\nName=Timeshift-cmd\nMimeType=\nExec=alacritty -e sudo timeshift-launcher\nType=Application\nGenericName=System Restore Utility\nGenericName[ca]=Utilitat de restauraci\u00f3 del sistema\nGenericName[cs]=N\u00e1stroj pro obnoven\u00ed syst\u00e9mu\nGenericName[da]=V\u00e6rkt\u00f8j til systemgendannelse\nGenericName[fr]=Utilitaire de restauration syst\u00e8me\nGenericName[hr]=Alat obnove sustava\nGenericName[lt]=Sistemos atk\u016brimo paslaug\u0173 programa\nGenericName[nl]=Hulpmiddel voor systeemherstel\nGenericName[ru]=\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043b\u044f \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b\nTerminal=1\nIcon=timeshift\nComment=System Restore Utility\nComment[ca]=Utilitat de restauraci\u00f3 del sistema\nComment[cs]=N\u00e1stroj pro obnoven\u00ed syst\u00e9mu\nComment[da]=V\u00e6rkt\u00f8j til systemgendannelse\nComment[fr]=Utilitaire de restauration syst\u00e8me\nComment[hr]=Alat obnove sustava\nComment[lt]=Sistemos atk\u016brimo paslaug\u0173 programa\nComment[nl]=Hulpmiddel voor systeemherstel\nComment[ru]=\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043b\u044f \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b\nX-KDE-StartupNotify=false\nCategories=System;\nX-GNOME-UsesNotifications=true", "/home/govi/.local/share/applications/tinyMediaManager.desktop\n", "/usr/share/icons/hicolor/64x64/apps/timeshift.png\n", "/usr/share/icons/hicolor/64x64/apps/firefox.png\n/usr/share/icons/hicolor/64x64/apps/kdenlive.png\n/usr/share/icons/hicolor/64x64/apps/kodi.png\n/usr/share/icons/hicolor/64x64/apps/lutris.png\n/usr/share/icons/hicolor/64x64/apps/mpv.png\n/usr/share/icons/hicolor/64x64/apps/spotify.png\n", "Timeshift", "bindkey", "^[[3~", "^?", "bindkey \"^[[H\" beginning-of-line\nbindkey \"^[[1~\" beginning-of-line\nbindkey \"^[[F\"  end-of-line\nbindkey \"^[[4~\" end-of-line", "forward-char", "showkey -a", "# Load aliases if existent.\n[ -f \"$HOME/.config/aliasrc\" ] && source \"$HOME/.config/aliasrc\"", "\n# Environment Games\n# export WINEFSYNC=1\n# export MANGOHUD=1\n# export MANGOHUD_DLSYM=1\n# export ENABLE_VKBASALT=1\nexport VKBASALT_CONFIG_FILE=\"$HOME/.config/vkBasalt/vkBasalt.conf\"", "export JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'\n", "# Aliases\nalias am=\"alsamixer\"\nalias cp=\"cp -rfv\"\nalias d1-p1=\"zenity --info --text \"Complete\" && paplay $HOME/.local/share/sounds/cause-and-effect.ogg\"\nalias du1=\"du -d1 -h\"\nalias ff=\"find \".\" -type f -iname \"\nalias fd=\"find \".\" -type d -iname \"\nalias ht=\"htop\"\nalias hy=\"history\"\nalias k9=\"kill -9\"\nalias ka=\"killall\"\nalias l=\"exa -al --color=always --group-directories-first\"\nalias mv=\"mv -fv\"\nalias nv=\"nvim\"\nalias pc=\"pavucontrol &\"\nalias pm=\"pacman\"\nalias pu=\"paru\"\nalias py=\"python3\"\nalias rm=\"rm -rfv\"\nalias sfm=\"spacefm\"\nalias spm=\"sudo pacman\"\nalias sth=\"sort -h\"\nalias snv=\"sudo -E nvim\"\nalias wrt=\"wrestool -x --output=. -t14\"\nalias yt=\"youtube-dl --add-metadata -ic\"\n\n# Git aliases\nalias gcl=\"git clone\"\nalias ga=\"git add\"\nalias gcm=\"git commit -m\"\nalias gpm=\"git push -u origin master\"", ":", "bindkey -M menuselect 'h' vi-backward-char\nbindkey -M menuselect 'k' vi-up-line-or-history\nbindkey -M menuselect 'l' vi-forward-char\nbindkey -M menuselect 'j' vi-down-line-or-history", "export GREP_COLOR='1;32'\nexport CLICOLOR=1", "export TERM=\"xterm-color\"\n", "alias egrep='egrep --color=auto'\n", "# vi mode\nbindkey -v\nexport KEYTIMEOUT=1", "# History\nHISTSIZE=10000\nSAVEHIST=10000\nHISTFILE=~/.cache/zsh_history\n\n# Basic auto/tab complete\nautoload -U compinit\nzstyle ':completion:*' menu select\nzmodload zsh/complist\ncompinit\n_comp_options+=(globdots) # Include hidden files.\n\n# Bind keys, \"showkey -a\" to see output of a key.\nbindkey \"^[[H\" beginning-of-line\nbindkey \"^[[1~\" beginning-of-line\nbindkey \"^[[F\" end-of-line\nbindkey \"^[[4~\" end-of-line\nbindkey \"^[[3~\" delete-char\nbindkey -M menuselect 'h' vi-backward-char\nbindkey -M menuselect 'k' vi-up-line-or-history\nbindkey -M menuselect 'l' vi-forward-char\nbindkey -M menuselect 'j' vi-down-line-or-history\n\n# Autocd\nsetopt autocd\n\n# Colors\nunset color_prompt force_color_prompt\nautoload -U colors && colors\nPS1=\"%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M$fg[green]%}:%{$fg[magenta]%}%~%{$fg[red]%}]%{$reset_color%}$%b \"\nalias diff=\"diff --color=auto\"\nalias egrep='egrep --color=auto'\nalias fgrep='fgrep --color=auto'\nalias grep=\"grep --color=auto\"\nexport GREP_COLOR='1;32'\nexport GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'\nexport CLICOLOR=1\nexport TERM=\"xterm-color\"\n\n# Environment\nexport BROWSER=\"firefox\"\nexport FILEMANAGER=\"spacefm\"\nexport TERMINAL=\"alacritty\"\nexport EDITOR=\"nvim\"\nexport VISUAL=\"nvim\"\nexport JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'\nexport PATH=$PATH:$HOME/Scripts/Shell/\nexport PATH=$PATH:$HOME/Scripts/Shell/Autostart/\nexport PATH=$PATH:$HOME/Scripts/Shell/Games/\nexport PATH=$PATH:$HOME/Scripts/Shell/Polybar/\nexport PATH=$PATH:$HOME/Scripts/Shell/Programs/\nexport PATH=$PATH:$HOME/Scripts/Shell/Utils/\nexport PATH=$PATH:$HOME/Programs/Pycharm/bin/\n\n# Environment Games\n# export WINEFSYNC=1\n# export MANGOHUD=1\n# export MANGOHUD_DLSYM=1\n# export ENABLE_VKBASALT=1\nexport VKBASALT_CONFIG_FILE=\"$HOME/.config/vkBasalt/vkBasalt.conf\"\n\n# Load aliases if exist.\n[ -f \"$HOME/.config/aliasrc\" ] && source \"$HOME/.config/aliasrc\"\n\n# Aliases\nalias am=\"alsamixer\"\nalias cp=\"cp -rfv\"\nalias d1-p1=\"zenity --info --text \"Complete\" && paplay $HOME/.local/share/sounds/cause-and-effect.ogg\"\nalias du1=\"du -d1 -h\"\nalias ff=\"find \".\" -type f -iname \"\nalias fd=\"find \".\" -type d -iname \"\nalias ht=\"htop\"\nalias hy=\"history\"\nalias k9=\"kill -9\"\nalias ka=\"killall\"\nalias l=\"exa -al --color=always --group-directories-first\"\nalias mv=\"mv -fv\"\nalias nv=\"nvim\"\nalias pc=\"pavucontrol &\"\nalias pm=\"pacman\"\nalias pu=\"paru\"\nalias py=\"python3\"\nalias rlz=\"source .zshrc\"\nalias rm=\"rm -rfv\"\nalias sfm=\"spacefm\"\nalias spm=\"sudo pacman\"\nalias sth=\"sort -h\"\nalias snv=\"sudo -E nvim\"\nalias wrt=\"wrestool -x --output=. -t14\"\nalias yt=\"youtube-dl --add-metadata -ic\"\n\n# Git aliases\nalias gcl=\"git clone\"\nalias ga=\"git add\"\nalias gcm=\"git commit -m\"\nalias gpm=\"git push -u origin master\"\n\n# System Info\nneofetch\n\n# Load zsh-syntax-highlighting; should be last.\nsource /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 2>/dev/null", "# Autocd\nsetopt autocd", "*/20 * * * * ~/.config/polybar/scripts/rss_games.sh", "*/30 * * * * ~/.config/polybar/scripts/rss_youtube.sh\n", "ALL ALL=(ALL) NOPASSWD: /usr/bin/pacman -Syy", "/etc/xdg/user-dirs.defaults", "user-dirs.dirs", "~/.config/user-dirs.dirs", "ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=5'", "60", "585858", "-256color", "240", "/home/govi/Pictures/Photos/Web/256_colors_fg.png\n", "kitty", "pixterm", "termpix", "off", "iterm2", "jp2a", "chafa", "caca", "ascii", "padding", "margin", "highlight_color", "this_current_screen_border", "86ACE0", "this_screen_border", "other_current_screen_border", "other_screen_border", "borderwidth", "urgent", "/home/govi/Downloads/Network.png\n/home/govi/Downloads/Network-icon.png\n", "sudo etcher-electron", "polkit-1-auth-agent", ", Match", "Match(title='pinentry')", "ulauncher", "    Match(title='ulauncher')\n", "onboard", "wmclass", "    {'wmclass': 'ssh-askpass'},  # ssh-askpass\n", "'matches': [Match(wm_class=('Firefox', 'Google-chrome'))],", "qtile window rules", "shutdown -h -a now", "markup_floating=\"<i>{}</i>\",\n                        markup_minimized=\"<s>{}</s>\"),", "                widget.Clock(fontsize=18),\n", "/home/govi/Pictures/Icons/System/Png/Power.png\n", " widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/nvidia3.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('nvidia-settings')}),", "top=bar.Bar(\n            [\n                widget.Image(filename='~/Pictures/GoVi-Theme/GoVi_gtk/GoVi_gtk-Icons/apps/64/archlinux.png',\n                             margin=0,\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('ulauncher')}),\n\n                widget.CurrentLayoutIcon(scale=0.7),\n\n                widget.GroupBox(font='FontAw4esome',\n                                disable_drag=True,\n                                highlight_method='text',\n                                this_current_screen_border='#86ACE0',\n                                borderwidth=0,\n                                active='#DFDFDF',\n                                inactive='#717171'),\n\n                widget.Prompt(),\n\n                widget.TaskList(borderwidth=2, border='#5C718E', fontsize=14,\n                                max_title_width=300),\n\n\n                widget.Systray(padding=10),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/preferences/32/preferences-desktop-sound.svg',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('pavucontrol')}),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/nvidia3.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('nvidia-settings')}),\n\n                widget.Clock(fontsize=18),\n\n                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/power.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('logout -h -a now')}),\n\n            ],\n            34,\n        ),\n    ),", " widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/power.png',\n                             mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('logout -h -a now')}),", "/home/govi/Pictures/Icons/System/Png/HD Portable.png\n", "Exec=bash -c 'kill -9 -1'\nIcon=/home/govi/Pictures/Icons/System/Png/Button-exit.png\n", "df -h / --output=avail | awk 'NR>1' \"$PGLIST\" | tr -d ' '", "kill -9 -1", "cmd_spawn('ulauncher'", "temp=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits)\n\n", "fmt", "fmt\n\t\n\n'{}'", "    subprocess.call([r'/home/govi/Scripts/Bash/Webgrab_Update_to_GIT.sh'])\n\n", "widget.GenPollText(", "/home/govi/.config/polybar/scripts/email.sh", "font=", "/home/govi/Scripts/Shell/Polybar/email.sh\n", "/home/govi/Scripts/Shell/Polybar/notf_switch.sh\n/home/govi/Scripts/Shell/Polybar/notifications.sh\n", "/home/govi/.config/qtile/scripts/notf_switch.sh\n/home/govi/.config/qtile/scripts/notifications.sh\n", " '/home/govi/.config/qtile/scripts/email.sh'", "%n%{$fg[green]%}@%", "    echo \"$fg[yellow]9\"\n", "echo \"$fg[yellow]", "~/.config/polybar/scripts/notifications.sh", "                    update_interval=180),\n", "GoVi_Icons", "                widget.Spacer(length=20),\n", "export PS1=\"\\[\\e[0;31m\\][\\[\\e[1;33m\\]\\u\\[\\e[1;37m\\]@\\[\\e[1;32m\\]\\h\\[\\e[1;37m\\]:\\[\\e[1;34m\\]\\w\\[\\e[0;31m\\]]\\[\\e[1;37m\\]$ \\[\\e[m\\]\"\nalias grep=\"grep --color=auto\"\n", "[\\e[0;31m\\]", "lambda: subprocess.call('~/.config/qtile/scripts/notifications.sh'),\n                    shell=True, text=True,", "getoutput", "def email():\n    e = subprocess.run('~/.config/qtile/scripts/notifications.sh',\n    shell=True, text=True,)\n    print(e, end=' '),", ", universal_newlines=True", "`tput setaf 1`", "\ud83d\udd15", "\ud83d\udd14", "def email():\n    e = subprocess.run('~/.config/qtile/scripts/notifications.sh',\n    shell=True, stdout=subprocess.PIPE)\n    print(e.stdout, end=' '),", "def email():\n    e = subprocess.run('~/.config/qtile/scripts/notifications.sh',\n    shell=True, stdout=subprocess.PIPE, universal_newlines=True)\n    print(e.stdout, end=' '),", "Noto Color Emoji", "def notf():\n    n = subprocess.run('~/.config/qtile/scripts/notifications.sh',\n    shell=True, stdout=subprocess.PIPE, universal_newlines=True)\n    print(n.stdout, end=' '),", "                    func=lambda: subprocess.getoutput('~/.config/qtile/scripts/email.sh'),\n", "def notf():\n    lambda: subprocess.getoutput('~/.config/qtile/scripts/notifications.sh')", "notf", "gpu_temp", "mb_temp", "/home/govi/.config/polybar/scripts/cpu_temp.sh\n", "application/x-desktop", "/home/govi/Pictures/GoVi-Theme/GoVi_gtk/GoVi_gtk-Icons/mimetypes/64/text-x-script.svg\n", "/home/govi/Downloads/Deepin-4All/Deepin-4All\n", "\n# Bad lectures\n#sensors | grep \"Package id 0:\" | tr -d 'Package id 0:(hh=8.,rt=1.+)' | cut -c -5\n\n# Works on terminal not in polybar though\n#     echo -e \ud83c\udf21 \"\\e[38;5;26m\"$temp\" \u00b0C\"\n\n# Search temperature output\n# for i in /sys/class/hwmon/hwmon*/temp*_input; do echo \"$(<$(dirname $i)/name): $(cat ${i%_*}_label 2>/dev/null || echo $(basename ${i%_*})) $(readlink -f $i)\"; done\n", " %{T3}0 %{T-}%{F#0095ff}", "%{F#fdbc4b}", "%{F-}\n", "%{F#f90e39}", " '/home/govi/.config/qtile/scripts/cpu_temp.sh'", "mb_temp = open('/sys/devices/platform/it87.2608/hwmon/hwmon2/temp1_input', 'r')\n", "cat /sys/devices/platform/coretemp.0/hwmon/hwmon1/temp1_input | cut -c -2", "/home/govi/.config/qtile/scripts/cpu_temp.sh", "cpu_temp = subprocess.getoutput('/home/govi/.config/qtile/scripts/cpu_temp.sh')\n", "widget.GenPollText(func=gpu_temp, update_interval=1, foreground=", "notf = subprocess.getoutput('~/.config/qtile/scripts/notifications.sh')", "cpu_temp = subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh')\n", "~/.config/qtile/scripts/cpu_temp.sh", "\u00b0C ", "~/.config/qtile/scripts/email.sh", "subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh')", "subprocess.getoutput('~/.config/qtile/scripts/gpu_temp.sh')", "subprocess.getoutput('~/.config/qtile/scripts/notifications.')", "                widget.TextBox(font='GoVi_Icons', text='H'),\n", "                widget.TextBox(font='GoVi_Icons', text='3'),\n", "0", " ", "font='GoVi_Icons',", "    echo \"\ud83d\udd25 $temp\u00b0C \"\n\n", "                widget.Image(filename='~/.local/share/icons/GoVi_gtk-Icons/apps/64/arrow_up.png'),\n", "cpu_icon", "t", "lambda: subprocess.getoutput('~/.config/qtile/scripts/cpu_temp.sh'", "~/.config/polybar/scripts/notf_switch.sh", "'Button1': ", "subprocess.run('~/.config/polybar/scripts/notf_switch.sh')", "subprocess.run('~/.config/qtile/scripts/notf_switch.sh')", "subprocess.call('~/.config/qtile/scripts/notf_switch.sh', shell=True)", "lambda:", "~/.config/qtile/scripts/notf_switch.sh", "margin=7,", "margin=15", ", margin=9", "subprocess", "                    update_interval=1),\n", "os.system('~/.config/qtile/scripts/notf_switch.sh')", "lambda: ", "mouse_callbacks", "qtile.cmd_spawn", "lambda qtile: qtile.cmd_spawn", "'Button1': lambda qtile: qtile.cmd_spawn", "os.system", "                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/notf_switch.sh')}),\n", "firefox \"http://www.gmail.com\"", "'sh -c ~/.config/qtile/scripts/notf_switch.sh'", "rss_youtube_Reset.sh", "                    mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/rss_youtube_Reset.sh')}),\n", "                    mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('sh -c ~/.config/qtile/scripts/rss_games_Reset.sh')}),\n", "github", "qtile", "e", "o", "l", "y", "b", "a", "r", "/home/govi/.config/polybar/scripts/system_update.sh\n/home/govi/.config/polybar/scripts/updates_AUR.sh\n/home/govi/.config/polybar/scripts/updates_pacman.sh\n", "/home/govi/.config/qtile/scripts/rss_youtube_Reset.sh", "lazy.restart()", "cmd_restart", "padding=3", ", margin=8),", "http://www.gmail.com", "                    mouse_callbacks={'Button1': lambda qtile: qtile.cmd_spawn('firefox \"http://www.gmail.com\"')}),\n", "                widget.Spacer(length=3),\n", "                widget.Spacer(length=2),\n"]}